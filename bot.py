import asyncio
import sqlite3
import os
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
DATABASE_FILE = os.getenv("DATABASE_FILE", "taxi_bot.db")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ==================== –î–ë ====================

def init_db():
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    # –í–æ–¥–∏—Ç–µ–ª–∏ - –ø—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å
    c.execute('''CREATE TABLE IF NOT EXISTS drivers
                 (user_id INTEGER PRIMARY KEY,
                  full_name TEXT NOT NULL,
                  car_number TEXT NOT NULL,
                  car_model TEXT NOT NULL,
                  total_seats INTEGER NOT NULL,
                  direction TEXT NOT NULL,
                  queue_position INTEGER NOT NULL,
                  is_active INTEGER DEFAULT 1,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # –ö–ª–∏–µ–Ω—Ç—ã - –ø—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å
    c.execute('''CREATE TABLE IF NOT EXISTS clients
                 (user_id INTEGER PRIMARY KEY,
                  full_name TEXT,
                  direction TEXT NOT NULL,
                  queue_position INTEGER NOT NULL,
                  pickup_location TEXT NOT NULL,
                  dropoff_location TEXT NOT NULL,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # –ê–¥–º–∏–Ω—ã
    c.execute('''CREATE TABLE IF NOT EXISTS admins
                 (user_id INTEGER PRIMARY KEY)''')
    
    conn.commit()
    conn.close()

# ==================== –£–¢–ò–õ–ò–¢–´ ====================

def is_admin(user_id: int) -> bool:
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT user_id FROM admins WHERE user_id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöó –Ø –≤–æ–¥–∏—Ç–µ–ª—å")],
            [KeyboardButton(text="üßç‚Äç‚ôÇÔ∏è –ú–Ω–µ –Ω—É–∂–Ω–æ —Ç–∞–∫—Å–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )

def direction_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É", callback_data="dir_shetpe_aktau")],
            [InlineKeyboardButton(text="–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ", callback_data="dir_aktau_shetpe")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
    )

# ==================== –í–û–î–ò–¢–ï–õ–ò ====================

class DriverReg(StatesGroup):
    full_name = State()
    car_number = State()
    car_model = State()
    seats = State()
    direction = State()

@dp.message(F.text == "üöó –Ø –≤–æ–¥–∏—Ç–µ–ª—å")
async def driver_start(message: types.Message, state: FSMContext):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM drivers WHERE user_id=?", (message.from_user.id,))
    driver = c.fetchone()
    conn.close()
    
    if driver:
        await show_driver_menu(message, message.from_user.id)
        return
    
    await message.answer(
        "üöó <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        parse_mode="HTML"
    )
    await state.set_state(DriverReg.full_name)

@dp.message(DriverReg.full_name)
async def driver_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–ù–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 870 ABC 09)")
    await state.set_state(DriverReg.car_number)

@dp.message(DriverReg.car_number)
async def driver_car_number(message: types.Message, state: FSMContext):
    await state.update_data(car_number=message.text)
    await message.answer("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Toyota Camry)")
    await state.set_state(DriverReg.car_model)

@dp.message(DriverReg.car_model)
async def driver_car_model(message: types.Message, state: FSMContext):
    await state.update_data(car_model=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –≤ –º–∞—à–∏–Ω–µ? (1-8)")
    await state.set_state(DriverReg.seats)

@dp.message(DriverReg.seats)
async def driver_seats(message: types.Message, state: FSMContext):
    try:
        seats = int(message.text)
        if seats < 1 or seats > 8:
            await message.answer("–û—à–∏–±–∫–∞! –ú–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 8")
            return
        await state.update_data(seats=seats)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
            reply_markup=direction_keyboard()
        )
        await state.set_state(DriverReg.direction)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.callback_query(DriverReg.direction, F.data.startswith("dir_"))
async def driver_direction(callback: types.CallbackQuery, state: FSMContext):
    direction = "–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É" if callback.data == "dir_shetpe_aktau" else "–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ"
    data = await state.get_data()
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
    c.execute(
        "SELECT MAX(queue_position) FROM drivers WHERE direction=? AND is_active=1",
        (direction,)
    )
    max_pos = c.fetchone()[0]
    queue_pos = (max_pos or 0) + 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    c.execute('''INSERT INTO drivers 
                 (user_id, full_name, car_number, car_model, total_seats, direction, queue_position)
                 VALUES (?, ?, ?, ?, ?, ?, ?)''',
              (callback.from_user.id, data['full_name'], data['car_number'],
               data['car_model'], data['seats'], direction, queue_pos))
    conn.commit()
    conn.close()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
        f"üë§ {data['full_name']}\n"
        f"üöó {data['car_model']} ({data['car_number']})\n"
        f"üí∫ –ú–µ—Å—Ç: {data['seats']}\n"
        f"üìç {direction}\n"
        f"üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ‚Ññ{queue_pos}\n\n"
        f"‚è≥ –ñ–¥–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤!",
        parse_mode="HTML"
    )
    await state.clear()

async def show_driver_menu(message: types.Message, user_id: int):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM drivers WHERE user_id=?", (user_id,))
    driver = c.fetchone()
    conn.close()
    
    if not driver:
        await message.answer("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=main_menu_keyboard())
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="driver_status")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –ø–∞—Å—Å–∞–∂–∏—Ä—ã", callback_data="driver_passengers")],
        [InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="driver_exit")],
        [InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="back_main")]
    ])
    
    queue_info = f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ‚Ññ{driver[6]}"
    
    await message.answer(
        f"üöó <b>–ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
        f"üë§ {driver[1]}\n"
        f"üöó {driver[3]} ({driver[2]})\n"
        f"üí∫ –ú–µ—Å—Ç: {driver[4]}\n"
        f"üìç {driver[5]}\n"
        f"{queue_info}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "driver_status")
async def driver_status(callback: types.CallbackQuery):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM drivers WHERE user_id=?", (callback.from_user.id,))
    driver = c.fetchone()
    
    # –°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∂–¥—É—Ç –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    c.execute("SELECT COUNT(*) FROM clients WHERE direction=?", (driver[5],))
    waiting = c.fetchone()[0]
    conn.close()
    
    await callback.message.edit_text(
        f"üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å</b>\n\n"
        f"üöó {driver[3]} ({driver[2]})\n"
        f"üìç {driver[5]}\n"
        f"üìä –ü–æ–∑–∏—Ü–∏—è: ‚Ññ{driver[6]}\n"
        f"‚è≥ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {waiting}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="driver_menu")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "driver_passengers")
async def driver_passengers(callback: types.CallbackQuery):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    c.execute("SELECT direction FROM drivers WHERE user_id=?", (callback.from_user.id,))
    driver_dir = c.fetchone()[0]
    
    c.execute('''SELECT full_name, pickup_location, dropoff_location 
                 FROM clients WHERE direction=? ORDER BY queue_position''', (driver_dir,))
    clients = c.fetchall()
    conn.close()
    
    if not clients:
        msg = "‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏"
    else:
        msg = f"üë• <b>–ö–ª–∏–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ ({len(clients)}):</b>\n\n"
        for i, client in enumerate(clients, 1):
            msg += f"{i}. {client[0]}\n"
            msg += f"   üìç {client[1]} ‚Üí {client[2]}\n\n"
    
    await callback.message.edit_text(
        msg,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="driver_menu")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "driver_exit")
async def driver_exit(callback: types.CallbackQuery):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    c.execute("DELETE FROM drivers WHERE user_id=?", (callback.from_user.id,))
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    c.execute("SELECT DISTINCT direction FROM drivers")
    directions = c.fetchall()
    
    for direction in directions:
        c.execute('''SELECT user_id FROM drivers 
                     WHERE direction=? ORDER BY queue_position''', direction)
        drivers = c.fetchall()
        for pos, driver in enumerate(drivers, 1):
            c.execute("UPDATE drivers SET queue_position=? WHERE user_id=?", (pos, driver[0]))
    
    conn.commit()
    conn.close()
    
    await callback.message.delete()
    await callback.message.answer(
        "‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "driver_menu")
async def driver_menu_back(callback: types.CallbackQuery):
    await show_driver_menu(callback.message, callback.from_user.id)
    await callback.answer()

# ==================== –ö–õ–ò–ï–ù–¢–´ ====================

class ClientOrder(StatesGroup):
    direction = State()
    pickup_location = State()
    dropoff_location = State()

@dp.message(F.text == "üßç‚Äç‚ôÇÔ∏è –ú–Ω–µ –Ω—É–∂–Ω–æ —Ç–∞–∫—Å–∏")
async def client_start(message: types.Message, state: FSMContext):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM clients WHERE user_id=?", (message.from_user.id,))
    client = c.fetchone()
    conn.close()
    
    if client:
        await message.answer(
            "‚ùå –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!",
            reply_markup=main_menu_keyboard()
        )
        return
    
    await message.answer(
        "üßç‚Äç‚ôÇÔ∏è <b>–í—ã–∑–æ–≤ —Ç–∞–∫—Å–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
        reply_markup=direction_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ClientOrder.direction)

@dp.callback_query(ClientOrder.direction, F.data.startswith("dir_"))
async def client_direction(callback: types.CallbackQuery, state: FSMContext):
    direction = "–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É" if callback.data == "dir_shetpe_aktau" else "–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ"
    await state.update_data(direction=direction)
    
    await callback.message.edit_text(
        "üìç –û—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å?\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:"
    )
    await state.set_state(ClientOrder.pickup_location)
    await callback.answer()

@dp.message(ClientOrder.pickup_location)
async def client_pickup(message: types.Message, state: FSMContext):
    await state.update_data(pickup_location=message.text)
    await message.answer(
        "üìç –ö—É–¥–∞ –≤–∞—Å –≤–µ–∑—Ç–∏?\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:"
    )
    await state.set_state(ClientOrder.dropoff_location)

@dp.message(ClientOrder.dropoff_location)
async def client_dropoff(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
    c.execute(
        "SELECT MAX(queue_position) FROM clients WHERE direction=?",
        (data['direction'],)
    )
    max_pos = c.fetchone()[0]
    queue_pos = (max_pos or 0) + 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    c.execute('''INSERT INTO clients 
                 (user_id, full_name, direction, queue_position, pickup_location, dropoff_location)
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (message.from_user.id, message.from_user.full_name or "–ö–ª–∏–µ–Ω—Ç",
               data['direction'], queue_pos, data['pickup_location'], message.text))
    conn.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    c.execute("SELECT COUNT(*) FROM drivers WHERE direction=? AND is_active=1", (data['direction'],))
    drivers = c.fetchone()[0]
    
    conn.close()
    
    await message.answer(
        f"‚úÖ <b>–¢–∞–∫—Å–∏ –≤—ã–∑–≤–∞–Ω–æ!</b>\n\n"
        f"üìç {data['direction']}\n"
        f"üìç –û—Ç: {data['pickup_location']}\n"
        f"üìç –î–æ: {message.text}\n"
        f"üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: ‚Ññ{queue_pos}\n"
        f"üöó –°–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {drivers}\n\n"
        f"‚è≥ –¢–∞–∫—Å–∏ —Å–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç!",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

# ==================== –û–ë–©–ï–ï ====================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "üöñ <b>–¢–∞–∫—Å–∏ –®–µ—Ç–ø–µ‚Äì–ê“õ—Ç–∞—É</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_command(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–û –Ω–∞—Å</b>\n\n"
        "üöñ –°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "<b>–î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π:</b>\n"
        "‚Ä¢ –í—Å—Ç–∞–Ω—å—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ, –∫—Ç–æ –≤–∞—Å –∂–¥–µ—Ç\n"
        "‚Ä¢ –í–µ–∑–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        "<b>–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
        "‚Ä¢ –í—ã–∑–æ–≤–∏—Ç–µ —Ç–∞–∫—Å–∏\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å–∞\n"
        "‚Ä¢ –ñ–¥–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è\n\n"
        "–ü—Ä–æ—Å—Ç–æ –∏ –±—ã—Å—Ç—Ä–æ! ‚ö°",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "back_main")
async def back_main(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

# ==================== –ê–î–ú–ò–ù ====================

def admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –í–æ–¥–∏—Ç–µ–ª–∏", callback_data="admin_drivers")],
        [InlineKeyboardButton(text="üßç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_clients")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "admin_drivers")
async def admin_drivers(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM drivers ORDER BY direction, queue_position")
    drivers = c.fetchall()
    conn.close()
    
    if not drivers:
        msg = "‚ùå –í–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç"
    else:
        msg = "üë• <b>–í–æ–¥–∏—Ç–µ–ª–∏:</b>\n\n"
        for driver in drivers:
            msg += f"‚Ññ{driver[6]} - {driver[1]}\n"
            msg += f"   üöó {driver[3]} ({driver[2]})\n"
            msg += f"   üìç {driver[5]}\n"
    
    await callback.message.edit_text(msg, reply_markup=admin_keyboard(), parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "admin_clients")
async def admin_clients(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM clients ORDER BY direction, queue_position")
    clients = c.fetchall()
    conn.close()
    
    if not clients:
        msg = "‚ùå –ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç"
    else:
        msg = "üßç‚Äç‚ôÇÔ∏è <b>–ö–ª–∏–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏:</b>\n\n"
        for client in clients:
            msg += f"‚Ññ{client[3]} - {client[1]}\n"
            msg += f"   üìç {client[2]}\n"
            msg += f"   –û—Ç: {client[4]}\n"
            msg += f"   –î–æ: {client[5]}\n\n"
    
    await callback.message.edit_text(msg, reply_markup=admin_keyboard(), parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM drivers")
    total_drivers = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM clients")
    total_clients = c.fetchone()[0]
    
    c.execute("SELECT direction, COUNT(*) FROM drivers GROUP BY direction")
    by_direction = c.fetchall()
    
    conn.close()
    
    msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    msg += f"üë• –í–æ–¥–∏—Ç–µ–ª–µ–π: {total_drivers}\n"
    msg += f"üßç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n\n"
    msg += "<b>–ü–æ –º–∞—Ä—à—Ä—É—Ç–∞–º:</b>\n"
    for direction, count in by_direction:
        msg += f"   {direction}: {count}\n"
    
    await callback.message.edit_text(msg, reply_markup=admin_keyboard(), parse_mode="HTML")
    await callback.answer()

# ==================== –°–¢–ê–†–¢ ====================

async def main():
    init_db()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())