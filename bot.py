import asyncio
import sqlite3
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# .env —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç–µ—É
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
KASPI_PHONE = os.getenv("KASPI_PHONE", "+7_XXX_XXX_XX_XX")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "@support")
DATABASE_FILE = os.getenv("DATABASE_FILE", "taxi_bot.db")
PAYMENT_AMOUNT = int(os.getenv("PAYMENT_AMOUNT", "1000"))

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ê–¥–º–∏–Ω–¥–µ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—É
def is_admin(user_id: int) -> bool:
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT user_id FROM admins WHERE user_id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

# FSM States
class DriverRegistration(StatesGroup):
    full_name = State()
    car_number = State()
    car_model = State()
    seats = State()
    direction = State()
    datetime_select = State()  # –ö“Ø–Ω –∂”ô–Ω–µ —É–∞“õ—ã—Ç —Ç–∞“£–¥–∞—É

class ClientBooking(StatesGroup):
    direction = State()
    datetime_select = State()  # –ö“Ø–Ω –∂”ô–Ω–µ —É–∞“õ—ã—Ç —Ç–∞“£–¥–∞—É
    pickup_location = State()
    dropoff_location = State()
    select_car = State()

class DriverEdit(StatesGroup):
    change_datetime = State()
    change_direction = State()
    change_car_model = State()
    change_car_number = State()
    change_seats = State()

# –î–µ—Ä–µ–∫“õ–æ—Ä–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
def init_db():
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS drivers
                 (user_id INTEGER PRIMARY KEY,
                  full_name TEXT NOT NULL,
                  car_number TEXT NOT NULL,
                  car_model TEXT NOT NULL,
                  total_seats INTEGER NOT NULL,
                  direction TEXT NOT NULL,
                  departure_date TEXT NOT NULL,
                  departure_time TEXT NOT NULL,
                  queue_position INTEGER NOT NULL,
                  is_active INTEGER DEFAULT 0,
                  payment_status INTEGER DEFAULT 0,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS clients
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  full_name TEXT,
                  phone TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS bookings
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  client_id INTEGER,
                  driver_id INTEGER,
                  direction TEXT,
                  departure_date TEXT,
                  pickup_location TEXT,
                  dropoff_location TEXT,
                  booking_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  status TEXT DEFAULT 'active',
                  FOREIGN KEY (client_id) REFERENCES clients(id),
                  FOREIGN KEY (driver_id) REFERENCES drivers(user_id))''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS admins
                 (user_id INTEGER PRIMARY KEY)''')
    
    conn.commit()
    conn.close()

# –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä
def main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöó –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ –∫—ñ—Ä—É")],
            [KeyboardButton(text="üßç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç —Ä–µ—Ç—ñ–Ω–¥–µ –∫—ñ—Ä—É")],
            [KeyboardButton(text="üìä –ú–µ–Ω—ñ“£ –±—Ä–æ–Ω–¥–∞—Ä—ã–º")],
            [KeyboardButton(text="‚ÑπÔ∏è –ê–Ω—ã“õ—Ç–∞–º–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ë–∞“ì—ã—Ç —Ç–∞“£–¥–∞—É
def direction_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É", callback_data="dir_shetpe_aktau")],
            [InlineKeyboardButton(text="–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ", callback_data="dir_aktau_shetpe")],
            [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="back_main")]
        ]
    )
    return keyboard

# –ö“Ø–Ω –∂”ô–Ω–µ —É–∞“õ—ã—Ç —Ç–∞“£–¥–∞—É (–±—ñ—Ä—ñ–∫—Ç—ñ—Ä—ñ–ª–≥–µ–Ω)
def datetime_keyboard(show_back_to_direction=True):
    keyboard_buttons = []
    today = datetime.now()
    
    # –ö“Ø–Ω –æ–ø—Ü–∏—è–ª–∞—Ä—ã
    for i in range(7):
        date = today + timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        
        if i == 0:
            display_text = f"üü¢ –ë“Ø–≥—ñ–Ω ({date.strftime('%d.%m')})"
        elif i == 1:
            display_text = f"üü° –ï—Ä—Ç–µ“£ ({date.strftime('%d.%m')})"
        else:
            weekdays = ["–î—Å", "–ë—Å", "–°—Å", "–°—Ä", "–ë–º", "–ñ–º", "–°–±"]
            weekday = weekdays[date.weekday()]
            display_text = f"{weekday} ({date.strftime('%d.%m')})"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=display_text,
            callback_data=f"dt_date_{date_str}"
        )])
    
    if show_back_to_direction:
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="back_direction")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

# –£–∞“õ—ã—Ç —Ç–∞“£–¥–∞—É (–∫“Ø–Ω —Ç–∞“£–¥–∞“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω)
def time_keyboard(selected_date):
    keyboard_buttons = []
    
    # –£–∞“õ—ã—Ç –æ–ø—Ü–∏—è–ª–∞—Ä—ã (06:00-–¥–µ–Ω 22:00-–≥–µ –¥–µ–π—ñ–Ω, ”ô—Ä 2 —Å–∞“ì–∞—Ç —Å–∞–π—ã–Ω)
    times = ["06:00", "08:00", "10:00", "12:00", "14:00", "16:00", "18:00", "20:00", "22:00"]
    
    # 2 –±–∞“ì–∞–Ω“ì–∞ –±”©–ª—É
    for i in range(0, len(times), 2):
        row = []
        for j in range(2):
            if i + j < len(times):
                time = times[i + j]
                row.append(InlineKeyboardButton(
                    text=f"üïê {time}",
                    callback_data=f"dt_time_{selected_date}_{time}"
                ))
        keyboard_buttons.append(row)
    
    # –ë–∞—Å“õ–∞ —É–∞“õ—ã—Ç “õ–æ–ª–º–µ–Ω –µ–Ω–≥—ñ–∑—É –æ–ø—Ü–∏—è—Å—ã
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚è∞ –ë–∞—Å“õ–∞ —É–∞“õ—ã—Ç (“õ–æ–ª–º–µ–Ω –µ–Ω–≥—ñ–∑—É)",
        callback_data=f"dt_custom_{selected_date}"
    )])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ö“Ø–Ω —Ç–∞“£–¥–∞—É“ì–∞", callback_data="back_datetime")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

# –û—Ä—ã–Ω —Ç–∞“£–¥–∞—É (–®–µ—Ç–ø–µ –∞—É–¥–∞–Ω–¥–∞—Ä—ã)
def shetpe_locations_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–®–µ—Ç–ø–µ –æ—Ä—Ç–∞–ª—ã“ì—ã", callback_data="loc_shetpe_center")],
            [InlineKeyboardButton(text="“ö—ã–∑—ã–ª—Å–∞–π", callback_data="loc_kyzylsay")],
            [InlineKeyboardButton(text="“ö–∞—Ä–∞“õ–∏—è", callback_data="loc_karakiya")],
            [InlineKeyboardButton(text="–°–∞–π—ã–Ω", callback_data="loc_saiyn")],
            [InlineKeyboardButton(text="–ë–∞—Å“õ–∞ –∂–µ—Ä", callback_data="loc_other")],
            [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="back_datetime")]
        ]
    )
    return keyboard

# –ê“õ—Ç–∞—É –æ—Ä—ã–Ω–¥–∞—Ä—ã
def aktau_locations_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="15 –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω", callback_data="loc_15mkr")],
            [InlineKeyboardButton(text="9 –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω", callback_data="loc_9mkr")],
            [InlineKeyboardButton(text="–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª", callback_data="loc_avtovokzal")],
            [InlineKeyboardButton(text="–ë–∞–∑–∞—Ä", callback_data="loc_bazar")],
            [InlineKeyboardButton(text="–ë–∞—Å“õ–∞ –∂–µ—Ä", callback_data="loc_other")],
            [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="back_datetime")]
        ]
    )
    return keyboard

# –ö“Ø–Ω–¥—ñ —Ñ–æ—Ä–º–∞—Ç—Ç–∞—É
def format_date_display(date_str):
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)
    
    if date_obj.date() == today:
        return f"–ë“Ø–≥—ñ–Ω ({date_obj.strftime('%d.%m.%Y')})"
    elif date_obj.date() == tomorrow:
        return f"–ï—Ä—Ç–µ“£ ({date_obj.strftime('%d.%m.%Y')})"
    else:
        weekdays = ["–î“Ø–π—Å–µ–Ω–±—ñ", "–°–µ–π—Å–µ–Ω–±—ñ", "–°”ô—Ä—Å–µ–Ω–±—ñ", "–ë–µ–π—Å–µ–Ω–±—ñ", "–ñ“±–º–∞", "–°–µ–Ω–±—ñ", "–ñ–µ–∫—Å–µ–Ω–±—ñ"]
        weekday = weekdays[date_obj.weekday()]
        return f"{weekday} ({date_obj.strftime('%d.%m.%Y')})"

# /start –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ, {message.from_user.first_name}! üëã\n\n"
        "üöñ <b>–®–µ—Ç–ø–µ‚Äì–ê“õ—Ç–∞—É‚Äì–®–µ—Ç–ø–µ —Ç–∞–∫—Å–∏ –∂“Ø–π–µ—Å—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!</b>\n\n"
        "–ë“±–ª –±–æ—Ç –∞—Ä“õ—ã–ª—ã —Å—ñ–∑:\n"
        "‚úÖ –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ –∫”©–ª—ñ–∫—Ç—ñ –∫–µ–∑–µ–∫–∫–µ “õ–æ—Å–∞ –∞–ª–∞—Å—ã–∑\n"
        "‚úÖ –ö–ª–∏–µ–Ω—Ç —Ä–µ—Ç—ñ–Ω–¥–µ –æ—Ä—ã–Ω –±—Ä–æ–Ω–¥–∞–π –∞–ª–∞—Å—ã–∑\n"
        "‚úÖ ”®–∑—ñ“£—ñ–∑–¥—ñ“£ –±—Ä–æ–Ω–¥–∞—Ä—ã“£—ã–∑–¥—ã –±–∞“õ—ã–ª–∞–π –∞–ª–∞—Å—ã–∑\n"
        "‚úÖ 7 –∫“Ø–Ω–≥–µ –¥–µ–π—ñ–Ω –∞–ª–¥—ã–Ω –∞–ª–∞ –±—Ä–æ–Ω–¥–∞–π –∞–ª–∞—Å—ã–∑\n\n"
        "–¢”©–º–µ–Ω–¥–µ–≥—ñ –º”ô–∑—ñ—Ä–¥–µ–Ω “õ–∞–∂–µ—Ç—Ç—ñ—Å—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )

# –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ç—ñ—Ä–∫–µ—É—ñ
@dp.message(F.text == "üöó –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ –∫—ñ—Ä—É")
async def driver_registration_start(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute("SELECT * FROM drivers WHERE user_id=?", (message.from_user.id,))
    driver = c.fetchone()
    conn.close()
    
    if driver:
        await message.answer(
            "–°—ñ–∑ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω—Å—ñ–∑!\n\n"
            "“ö–æ—Å—ã–º—à–∞ –æ–ø—Ü–∏—è–ª–∞—Ä “Ø—à—ñ–Ω /driver –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑."
        )
        return
    
    await message.answer(
        "üöó <b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ç—ñ—Ä–∫–µ—É—ñ</b>\n\n"
        "–ê—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑–¥—ñ —Ç–æ–ª—ã“õ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
        "(–ú—ã—Å–∞–ª—ã: –ê–π–¥–æ—Å –ù“±—Ä–ª–∞–Ω“±–ª—ã)",
        parse_mode="HTML"
    )
    await state.set_state(DriverRegistration.full_name)

@dp.message(DriverRegistration.full_name)
async def driver_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer(
        "–ö”©–ª—ñ–∫ –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
        "(–ú—ã—Å–∞–ª—ã: 870 ABC 09)"
    )
    await state.set_state(DriverRegistration.car_number)

@dp.message(DriverRegistration.car_number)
async def driver_car_number(message: types.Message, state: FSMContext):
    await state.update_data(car_number=message.text)
    await message.answer(
        "–ö”©–ª—ñ–∫ –º–∞—Ä–∫–∞—Å—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
        "(–ú—ã—Å–∞–ª—ã: Toyota Camry)"
    )
    await state.set_state(DriverRegistration.car_model)

@dp.message(DriverRegistration.car_model)
async def driver_car_model(message: types.Message, state: FSMContext):
    await state.update_data(car_model=message.text)
    await message.answer(
        "–ë–æ—Å –æ—Ä—ã–Ω —Å–∞–Ω—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
        "(–ú—ã—Å–∞–ª—ã: 4)"
    )
    await state.set_state(DriverRegistration.seats)

@dp.message(DriverRegistration.seats)
async def driver_seats(message: types.Message, state: FSMContext):
    try:
        seats = int(message.text)
        if seats < 1 or seats > 8:
            await message.answer("–û—Ä—ã–Ω —Å–∞–Ω—ã 1-–¥–µ–Ω 8-–≥–µ –¥–µ–π—ñ–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫. “ö–∞–π—Ç–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
            return
        await state.update_data(seats=seats)
        await message.answer(
            "–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=direction_keyboard()
        )
        await state.set_state(DriverRegistration.direction)
    except ValueError:
        await message.answer("–¢–µ–∫ —Å–∞–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑. “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑:")

@dp.callback_query(DriverRegistration.direction, F.data.startswith("dir_"))
async def driver_direction(callback: types.CallbackQuery, state: FSMContext):
    direction = "–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É" if callback.data == "dir_shetpe_aktau" else "–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ"
    await state.update_data(direction=direction)
    await callback.message.edit_text(
        f"‚úÖ –ë–∞“ì—ã—Ç: {direction}\n\n"
        "üìÖ “ö–∞–π –∫“Ø–Ω—ñ –∂“Ø—Ä–µ—Å—ñ–∑?",
        reply_markup=datetime_keyboard()
    )
    await callback.answer()
    await state.set_state(DriverRegistration.datetime_select)

# –ö“Ø–Ω —Ç–∞“£–¥–∞—É (–∂“Ø—Ä–≥—ñ–∑—É—à—ñ)
@dp.callback_query(DriverRegistration.datetime_select, F.data.startswith("dt_date_"))
async def driver_date_select(callback: types.CallbackQuery, state: FSMContext):
    date_str = callback.data.replace("dt_date_", "")
    await state.update_data(departure_date=date_str)
    
    date_display = format_date_display(date_str)
    
    await callback.message.edit_text(
        f"‚úÖ –ö“Ø–Ω—ñ: {date_display}\n\n"
        "üïê –®—ã“ì—É —É–∞“õ—ã—Ç—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=time_keyboard(date_str)
    )
    await callback.answer()

# –£–∞“õ—ã—Ç —Ç–∞“£–¥–∞—É (–∂“Ø—Ä–≥—ñ–∑—É—à—ñ)
@dp.callback_query(DriverRegistration.datetime_select, F.data.startswith("dt_time_"))
async def driver_time_select(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    time_str = parts[-1]
    
    await state.update_data(departure_time=time_str)
    data = await state.get_data()
    
    # –ö–µ–∑–µ–∫ –ø–æ–∑–∏—Ü–∏—è—Å—ã–Ω –∞–Ω—ã“õ—Ç–∞—É
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute("""SELECT MAX(queue_position) FROM drivers 
                 WHERE direction=? AND departure_date=?""", 
              (data['direction'], data['departure_date']))
    max_pos = c.fetchone()[0]
    queue_pos = (max_pos or 0) + 1
    
    # –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–Ω—ñ —Å–∞“õ—Ç–∞—É
    c.execute('''INSERT INTO drivers 
                 (user_id, full_name, car_number, car_model, total_seats, direction, 
                  departure_date, departure_time, queue_position)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
              (callback.from_user.id, data['full_name'], data['car_number'], 
               data['car_model'], data['seats'], data['direction'], 
               data['departure_date'], data['departure_time'], queue_pos))
    conn.commit()
    conn.close()
    
    date_display = format_date_display(data['departure_date'])
    
    await callback.message.edit_text(
        "‚úÖ <b>–¢—ñ—Ä–∫–µ—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã!</b>\n\n"
        f"üë§ –ê—Ç—ã-–∂”©–Ω—ñ: {data['full_name']}\n"
        f"üöó –ö”©–ª—ñ–∫: {data['car_model']} ({data['car_number']})\n"
        f"üí∫ –û—Ä—ã–Ω —Å–∞–Ω—ã: {data['seats']}\n"
        f"üìç –ë–∞“ì—ã—Ç: {data['direction']}\n"
        f"üìÖ –ö“Ø–Ω—ñ: {date_display}\n"
        f"üïê –ö–µ—Ç—É —É–∞“õ—ã—Ç—ã: {data['departure_time']}\n"
        f"üìä –ö–µ–∑–µ–∫—Ç–µ–≥—ñ –æ—Ä—ã–Ω: ‚Ññ{queue_pos}\n\n"
        "‚ö†Ô∏è <b>–ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä—ã“£—ã–∑!</b>\n"
        "–ö”©–ª—ñ–∫—Ç—ñ –±–µ–ª—Å–µ–Ω–¥—ñ—Ä—É “Ø—à—ñ–Ω —Ç”©–ª–µ–º –∂–∞—Å–∞—É “õ–∞–∂–µ—Ç:\n"
        "üí∞ –¢”©–ª–µ–º: 1000 —Ç–≥ –Ω–µ–º–µ—Å–µ 5%\n\n"
        "–¢”©–ª–µ–º –∂–∞—Å–∞—É “Ø—à—ñ–Ω /payment –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑.",
        parse_mode="HTML"
    )
    await callback.answer()
    await state.clear()

# “ö–æ–ª–º–µ–Ω —É–∞“õ—ã—Ç –µ–Ω–≥—ñ–∑—É (–∂“Ø—Ä–≥—ñ–∑—É—à—ñ)
@dp.callback_query(DriverRegistration.datetime_select, F.data.startswith("dt_custom_"))
async def driver_custom_time(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚è∞ –®—ã“ì—É —É–∞“õ—ã—Ç—ã–Ω “õ–æ–ª–º–µ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
        "(–ú—ã—Å–∞–ª—ã: 08:30 –Ω–µ–º–µ—Å–µ 14:15)"
    )
    await callback.answer()
    await state.set_state(DriverRegistration.datetime_select)

# –ö–ª–∏–µ–Ω—Ç –±—Ä–æ–Ω–¥–∞—É—ã
@dp.message(F.text == "üßç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç —Ä–µ—Ç—ñ–Ω–¥–µ –∫—ñ—Ä—É")
async def client_booking_start(message: types.Message, state: FSMContext):
    await message.answer(
        "üßç‚Äç‚ôÇÔ∏è <b>–û—Ä—ã–Ω –±—Ä–æ–Ω–¥–∞—É</b>\n\n"
        "–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=direction_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ClientBooking.direction)

@dp.callback_query(ClientBooking.direction, F.data.startswith("dir_"))
async def client_direction(callback: types.CallbackQuery, state: FSMContext):
    direction = "–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É" if callback.data == "dir_shetpe_aktau" else "–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ"
    await state.update_data(direction=direction)
    
    await callback.message.edit_text(
        f"‚úÖ –ë–∞“ì—ã—Ç: {direction}\n\n"
        "üìÖ “ö–∞–π –∫“Ø–Ω—ñ –∂“Ø—Ä–µ—Å—ñ–∑?",
        reply_markup=datetime_keyboard()
    )
    
    await callback.answer()
    await state.set_state(ClientBooking.datetime_select)

# –ö“Ø–Ω —Ç–∞“£–¥–∞—É (–∫–ª–∏–µ–Ω—Ç)
@dp.callback_query(ClientBooking.datetime_select, F.data.startswith("dt_date_"))
async def client_date_select(callback: types.CallbackQuery, state: FSMContext):
    date_str = callback.data.replace("dt_date_", "")
    await state.update_data(departure_date=date_str)
    
    date_display = format_date_display(date_str)
    data = await state.get_data()
    
    if data['direction'] == "–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É":
        await callback.message.edit_text(
            f"‚úÖ –ë–∞“ì—ã—Ç: {data['direction']}\n"
            f"‚úÖ –ö“Ø–Ω—ñ: {date_display}\n\n"
            "“ö–∞–π –∂–µ—Ä–¥–µ–Ω –º—ñ–Ω–µ—Å—ñ–∑?",
            reply_markup=shetpe_locations_keyboard()
        )
    else:
        await callback.message.edit_text(
            f"‚úÖ –ë–∞“ì—ã—Ç: {data['direction']}\n"
            f"‚úÖ –ö“Ø–Ω—ñ: {date_display}\n\n"
            "“ö–∞–π –∂–µ—Ä–¥–µ–Ω –º—ñ–Ω–µ—Å—ñ–∑?",
            reply_markup=aktau_locations_keyboard()
        )
    
    await callback.answer()
    await state.set_state(ClientBooking.pickup_location)

@dp.callback_query(ClientBooking.pickup_location, F.data.startswith("loc_"))
async def client_pickup(callback: types.CallbackQuery, state: FSMContext):
    location_map = {
        "loc_shetpe_center": "–®–µ—Ç–ø–µ –æ—Ä—Ç–∞–ª—ã“ì—ã",
        "loc_kyzylsay": "“ö—ã–∑—ã–ª—Å–∞–π",
        "loc_karakiya": "“ö–∞—Ä–∞“õ–∏—è",
        "loc_saiyn": "–°–∞–π—ã–Ω",
        "loc_15mkr": "15 –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω",
        "loc_9mkr": "9 –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω",
        "loc_avtovokzal": "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª",
        "loc_bazar": "–ë–∞–∑–∞—Ä",
        "loc_other": "–ë–∞—Å“õ–∞ –∂–µ—Ä"
    }
    
    pickup = location_map.get(callback.data, "–ë–µ–ª–≥—ñ—Å—ñ–∑")
    await state.update_data(pickup_location=pickup)
    
    data = await state.get_data()
    
    if data['direction'] == "–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É":
        await callback.message.edit_text(
            f"‚úÖ –ú—ñ–Ω–µ—Ç—ñ–Ω –∂–µ—Ä: {pickup}\n\n"
            "“ö–∞–π –∂–µ—Ä–¥–µ —Ç“Ø—Å–µ—Å—ñ–∑?",
            reply_markup=aktau_locations_keyboard()
        )
    else:
        await callback.message.edit_text(
            f"‚úÖ –ú—ñ–Ω–µ—Ç—ñ–Ω –∂–µ—Ä: {pickup}\n\n"
            "“ö–∞–π –∂–µ—Ä–¥–µ —Ç“Ø—Å–µ—Å—ñ–∑?",
            reply_markup=shetpe_locations_keyboard()
        )
    
    await callback.answer()
    await state.set_state(ClientBooking.dropoff_location)

@dp.callback_query(ClientBooking.dropoff_location, F.data.startswith("loc_"))
async def client_dropoff(callback: types.CallbackQuery, state: FSMContext):
    location_map = {
        "loc_shetpe_center": "–®–µ—Ç–ø–µ –æ—Ä—Ç–∞–ª—ã“ì—ã",
        "loc_kyzylsay": "“ö—ã–∑—ã–ª—Å–∞–π",
        "loc_karakiya": "“ö–∞—Ä–∞“õ–∏—è",
        "loc_saiyn": "–°–∞–π—ã–Ω",
        "loc_15mkr": "15 –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω",
        "loc_9mkr": "9 –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω",
        "loc_avtovokzal": "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª",
        "loc_bazar": "–ë–∞–∑–∞—Ä",
        "loc_other": "–ë–∞—Å“õ–∞ –∂–µ—Ä"
    }
    
    dropoff = location_map.get(callback.data, "–ë–µ–ª–≥—ñ—Å—ñ–∑")
    await state.update_data(dropoff_location=dropoff)
    
    data = await state.get_data()
    date_display = format_date_display(data['departure_date'])
    
    # “ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –∫”©–ª—ñ–∫—Ç–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute('''SELECT d.user_id, d.full_name, d.car_model, d.car_number, 
                        d.total_seats, d.departure_time, d.queue_position,
                        COUNT(b.id) as booked_seats
                 FROM drivers d
                 LEFT JOIN bookings b ON d.user_id = b.driver_id 
                    AND b.status = 'active' AND b.departure_date = d.departure_date
                 WHERE d.direction = ? AND d.departure_date = ? 
                    AND d.is_active = 1 AND d.payment_status = 1
                 GROUP BY d.user_id
                 ORDER BY d.queue_position''', 
              (data['direction'], data['departure_date']))
    drivers = c.fetchall()
    conn.close()
    
    if not drivers:
        await callback.message.edit_text(
            f"‚ùå {date_display} –∫“Ø–Ω—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –∫”©–ª—ñ–∫—Ç–µ—Ä –∂–æ“õ.\n\n"
            "–ë–∞—Å“õ–∞ –∫“Ø–Ω —Ç–∞“£–¥–∞–ø –∫”©—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ", callback_data="back_main")]
            ])
        )
        await state.clear()
        return
    
    message_text = f"üìÖ –ö“Ø–Ω—ñ: {date_display}\n"
    message_text += f"‚úÖ –ú—ñ–Ω–µ—Ç—ñ–Ω –∂–µ—Ä: {data['pickup_location']}\n"
    message_text += f"‚úÖ –¢“Ø—Å–µ—Ç—ñ–Ω –∂–µ—Ä: {dropoff}\n\n"
    message_text += "üöó <b>–ë–æ—Å –∫”©–ª—ñ–∫—Ç–µ—Ä:</b>\n\n"
    
    keyboard_buttons = []
    for driver in drivers:
        available_seats = driver[4] - driver[7]
        if available_seats > 0:
            message_text += f"üöñ <b>‚Ññ{driver[6]} –∫”©–ª—ñ–∫</b>\n"
            message_text += f"   üë§ {driver[1]}\n"
            message_text += f"   üöó {driver[2]} ({driver[3]})\n"
            message_text += f"   üí∫ –ë–æ—Å –æ—Ä—ã–Ω: {available_seats}/{driver[4]}\n"
            message_text += f"   üïê –ö–µ—Ç—É: {driver[5]}\n\n"
            
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"–û—Ä–Ω—ã–º–¥—ã ‚Ññ{driver[6]} –∫”©–ª—ñ–∫—Ç–µ –±—Ä–æ–Ω–¥–∞—É ({driver[5]})",
                callback_data=f"book_{driver[0]}"
            )])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="back_datetime")])
    
    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )
    await callback.answer()
    await state.set_state(ClientBooking.select_car)

@dp.callback_query(ClientBooking.select_car, F.data.startswith("book_"))
async def client_book_car(callback: types.CallbackQuery, state: FSMContext):
    driver_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    
    # –ö–ª–∏–µ–Ω—Ç—Ç—ñ —Ç–µ–∫—Å–µ—Ä—É/“õ–æ—Å—É
    c.execute("SELECT id FROM clients WHERE user_id=?", (callback.from_user.id,))
    client = c.fetchone()
    
    if not client:
        c.execute("INSERT INTO clients (user_id, full_name) VALUES (?, ?)",
                  (callback.from_user.id, callback.from_user.full_name))
        client_id = c.lastrowid
    else:
        client_id = client[0]
    
    # –ë—Ä–æ–Ω–¥–∞—É
    c.execute('''INSERT INTO bookings 
                 (client_id, driver_id, direction, departure_date, pickup_location, dropoff_location)
                 VALUES (?, ?, ?, ?, ?, ?)''',
              (client_id, driver_id, data['direction'], data['departure_date'],
               data['pickup_location'], data['dropoff_location']))
    
    # –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ
    c.execute('''SELECT d.full_name, d.car_model, d.car_number, d.departure_time,
                        d.total_seats, d.departure_date, COUNT(b.id) as booked_seats
                 FROM drivers d
                 LEFT JOIN bookings b ON d.user_id = b.driver_id 
                    AND b.status = 'active' AND b.departure_date = d.departure_date
                 WHERE d.user_id = ?
                 GROUP BY d.user_id''', (driver_id,))
    driver = c.fetchone()
    
    conn.commit()
    conn.close()
    
    booked_seats = driver[6] + 1
    total_seats = driver[4]
    date_display = format_date_display(driver[5])
    
    await callback.message.edit_text(
        "‚úÖ <b>–ë—Ä–æ–Ω–¥–∞—É —Å”ô—Ç—Ç—ñ!</b>\n\n"
        f"üöó –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ: {driver[0]}\n"
        f"üöô –ö”©–ª—ñ–∫: {driver[1]} ({driver[2]})\n"
        f"üìç –ë–∞“ì—ã—Ç: {data['direction']}\n"
        f"üìÖ –ö“Ø–Ω—ñ: {date_display}\n"
        f"üïê –®—ã“ì—É —É–∞“õ—ã—Ç—ã: {driver[3]}\n"
        f"üìç –ú—ñ–Ω–µ—Ç—ñ–Ω –∂–µ—Ä: {data['pickup_location']}\n"
        f"üìç –¢“Ø—Å–µ—Ç—ñ–Ω –∂–µ—Ä: {data['dropoff_location']}\n"
        f"üí∫ –û—Ä—ã–Ω: {booked_seats}/{total_seats}\n\n"
        "–ñ–æ–ª—ã“£—ã–∑ –±–æ–ª—Å—ã–Ω! üöóüí®",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ", callback_data="back_main")]
        ]),
        parse_mode="HTML"
    )
    
    # –ö”©–ª—ñ–∫ —Ç–æ–ª—Å–∞ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞
    if booked_seats == total_seats:
        await bot.send_message(
            driver_id,
            f"‚úÖ <b>–ö”©–ª—ñ–∫ —Ç–æ–ª–¥—ã!</b>\n\n"
            f"üìÖ –ö“Ø–Ω—ñ: {date_display}\n"
            f"üí∫ {total_seats} –∞–¥–∞–º —Ç—ñ—Ä–∫–µ–ª–¥—ñ.\n"
            f"üïê –ö–µ—Ç—É —É–∞“õ—ã—Ç—ã: {driver[3]}\n\n"
            "–°—ñ–∑ –∂–æ–ª“ì–∞ —à—ã“ì–∞ –∞–ª–∞—Å—ã–∑! üöó",
            parse_mode="HTML"
        )
    
    await state.clear()

# –ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É callback-—Ç–µ—Ä—ñ
@dp.callback_query(F.data == "back_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–¥—ã“£—ã–∑.",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "back_direction")
async def back_to_direction(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=direction_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "back_datetime")
async def back_to_datetime(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    direction = data.get('direction', '')
    
    await callback.message.edit_text(
        f"‚úÖ –ë–∞“ì—ã—Ç: {direction}\n\n"
        "üìÖ “ö–∞–π –∫“Ø–Ω—ñ –∂“Ø—Ä–µ—Å—ñ–∑?",
        reply_markup=datetime_keyboard()
    )
    await callback.answer()

# –ú–µ–Ω—ñ“£ –±—Ä–æ–Ω–¥–∞—Ä—ã–º
@dp.message(F.text == "üìä –ú–µ–Ω—ñ“£ –±—Ä–æ–Ω–¥–∞—Ä—ã–º")
async def my_bookings(message: types.Message):
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    
    # –ö–ª–∏–µ–Ω—Ç –±—Ä–æ–Ω–¥–∞—Ä—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
    c.execute('''SELECT b.id, d.full_name, d.car_model, d.car_number, 
                        b.direction, b.departure_date, d.departure_time,
                        b.pickup_location, b.dropoff_location, b.status
                 FROM bookings b
                 JOIN drivers d ON b.driver_id = d.user_id
                 JOIN clients c ON b.client_id = c.id
                 WHERE c.user_id = ? AND b.status = 'active'
                 ORDER BY b.departure_date, d.departure_time''', 
              (message.from_user.id,))
    bookings = c.fetchall()
    
    # –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ –∫”©–ª—ñ–∫—Ç–µ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—É
    c.execute('''SELECT user_id, car_model, car_number, direction, 
                        departure_date, departure_time, total_seats, is_active
                 FROM drivers
                 WHERE user_id = ?
                 ORDER BY departure_date, departure_time''', 
              (message.from_user.id,))
    driver_cars = c.fetchall()
    
    conn.close()
    
    if not bookings and not driver_cars:
        await message.answer(
            "üìä –°—ñ–∑–¥–µ ”ô–∑—ñ—Ä—à–µ –±—Ä–æ–Ω–¥–∞—Ä –∂–æ“õ.\n\n"
            "–û—Ä—ã–Ω –±—Ä–æ–Ω–¥–∞—É “Ø—à—ñ–Ω ¬´üßç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç —Ä–µ—Ç—ñ–Ω–¥–µ –∫—ñ—Ä—É¬ª –Ω–µ–º–µ—Å–µ\n"
            "–∫”©–ª—ñ–∫ “õ–æ—Å—É “Ø—à—ñ–Ω ¬´üöó –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ –∫—ñ—Ä—É¬ª –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    message_text = "üìä <b>–ú–µ–Ω—ñ“£ –±—Ä–æ–Ω–¥–∞—Ä—ã–º:</b>\n\n"
    
    # –ö–ª–∏–µ–Ω—Ç –±—Ä–æ–Ω–¥–∞—Ä—ã
    if bookings:
        message_text += "üë§ <b>–ö–ª–∏–µ–Ω—Ç —Ä–µ—Ç—ñ–Ω–¥–µ:</b>\n\n"
        for booking in bookings:
            date_display = format_date_display(booking[5])
            message_text += f"üé´ –ë—Ä–æ–Ω–¥ #{booking[0]}\n"
            message_text += f"üöó –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ: {booking[1]}\n"
            message_text += f"üöô –ö”©–ª—ñ–∫: {booking[2]} ({booking[3]})\n"
            message_text += f"üìç {booking[4]}\n"
            message_text += f"üìÖ {date_display}\n"
            message_text += f"üïê –®—ã“ì—É: {booking[6]}\n"
            message_text += f"üìç {booking[7]} ‚Üí {booking[8]}\n\n"
    
    # –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ –∫”©–ª—ñ–∫—Ç–µ—Ä—ñ
    if driver_cars:
        message_text += "üöó <b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ:</b>\n\n"
        for car in driver_cars:
            date_display = format_date_display(car[4])
            status = "‚úÖ –ë–µ–ª—Å–µ–Ω–¥—ñ" if car[7] else "‚è≥ –ö“Ø—Ç—ñ–ª—É–¥–µ"
            message_text += f"üöñ –ö”©–ª—ñ–∫: {car[1]} ({car[2]})\n"
            message_text += f"üìç {car[3]}\n"
            message_text += f"üìÖ {date_display}\n"
            message_text += f"üïê –®—ã“ì—É: {car[5]}\n"
            message_text += f"üí∫ –û—Ä—ã–Ω: {car[6]}\n"
            message_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    await message.answer(message_text, parse_mode="HTML", reply_markup=main_menu_keyboard())

# –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ –ø—Ä–æ—Ñ–∏–ª—ñ
@dp.message(Command("driver"))
async def driver_profile(message: types.Message):
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute("SELECT * FROM drivers WHERE user_id=?", (message.from_user.id,))
    driver = c.fetchone()
    conn.close()
    
    if not driver:
        await message.answer(
            "‚ùå –°—ñ–∑ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑.\n\n"
            "–¢—ñ—Ä–∫–µ–ª—É “Ø—à—ñ–Ω 'üöó –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ –∫—ñ—Ä—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    date_display = format_date_display(driver[6])
    status = "‚úÖ –ë–µ–ª—Å–µ–Ω–¥—ñ" if driver[9] else "‚è≥ –ö“Ø—Ç—ñ–ª—É–¥–µ"
    payment = "‚úÖ –¢”©–ª–µ–Ω–≥–µ–Ω" if driver[10] else "‚ùå –¢”©–ª–µ–Ω–±–µ–≥–µ–Ω"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ú–µ–Ω—ñ“£ –∂–æ–ª–∞—É—à—ã–ª–∞—Ä—ã–º", callback_data="driver_passengers")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ö“Ø–Ω/—É–∞“õ—ã—Ç ”©–∑–≥–µ—Ä—Ç—É", callback_data="driver_change_datetime")],
        [InlineKeyboardButton(text="üîÑ –ë–∞“ì—ã—Ç ”©–∑–≥–µ—Ä—Ç—É", callback_data="driver_change_direction")],
        [InlineKeyboardButton(text="üöó –ö”©–ª—ñ–∫ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ–Ω ”©–∑–≥–µ—Ä—Ç—É", callback_data="driver_change_car")],
        [InlineKeyboardButton(text="‚ùå –¢—ñ—Ä–∫–µ—É–¥–µ–Ω —à—ã“ì—É", callback_data="driver_unregister")],
        [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="back_main")]
    ])
    
    await message.answer(
        f"üöó <b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ –ø—Ä–æ—Ñ–∏–ª—ñ</b>\n\n"
        f"üë§ –ê—Ç—ã-–∂”©–Ω—ñ: {driver[1]}\n"
        f"üöô –ö”©–ª—ñ–∫: {driver[3]} ({driver[2]})\n"
        f"üí∫ –û—Ä—ã–Ω —Å–∞–Ω—ã: {driver[4]}\n"
        f"üìç –ë–∞“ì—ã—Ç: {driver[5]}\n"
        f"üìÖ –ö“Ø–Ω—ñ: {date_display}\n"
        f"üïê –®—ã“ì—É —É–∞“õ—ã—Ç—ã: {driver[7]}\n"
        f"üìä –ö–µ–∑–µ–∫—Ç–µ–≥—ñ –æ—Ä—ã–Ω: ‚Ññ{driver[8]}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üí∞ –¢”©–ª–µ–º: {payment}\n\n"
        "–ë–∞—Å“õ–∞—Ä—É –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–Ω—ñ“£ –∂–æ–ª–∞—É—à—ã–ª–∞—Ä—ã–Ω –∫”©—Ä—Å–µ—Ç—É
@dp.callback_query(F.data == "driver_passengers")
async def show_driver_passengers(callback: types.CallbackQuery):
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute('''SELECT c.full_name, b.pickup_location, b.dropoff_location, b.departure_date
                 FROM bookings b
                 JOIN clients c ON b.client_id = c.id
                 WHERE b.driver_id = ? AND b.status = 'active'
                 ORDER BY b.booking_time''', (callback.from_user.id,))
    passengers = c.fetchall()
    conn.close()
    
    if not passengers:
        await callback.message.edit_text(
            "‚ùå ”ò–∑—ñ—Ä—à–µ –∂–æ–ª–∞—É—à—ã–ª–∞—Ä –∂–æ“õ.\n\n"
            "–ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä –±—Ä–æ–Ω–¥–∞“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω –º“±–Ω–¥–∞ –∫”©—Ä—ñ–Ω–µ–¥—ñ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ü—Ä–æ—Ñ–∏–ª—å–≥–µ", callback_data="back_to_driver_profile")]
            ])
        )
        await callback.answer()
        return
    
    date_display = format_date_display(passengers[0][3])
    msg = f"üë• <b>–ú–µ–Ω—ñ“£ –∂–æ–ª–∞—É—à—ã–ª–∞—Ä—ã–º</b>\n\n"
    msg += f"üìÖ –ö“Ø–Ω—ñ: {date_display}\n\n"
    
    for i, passenger in enumerate(passengers, 1):
        msg += f"{i}. {passenger[0]}\n"
        msg += f"   üìç {passenger[1]} ‚Üí {passenger[2]}\n\n"
    
    msg += f"<b>–ñ–∞–ª–ø—ã:</b> {len(passengers)} –∂–æ–ª–∞—É—à—ã"
    
    await callback.message.edit_text(
        msg,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ü—Ä–æ—Ñ–∏–ª—å–≥–µ", callback_data="back_to_driver_profile")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# –ö“Ø–Ω/—É–∞“õ—ã—Ç ”©–∑–≥–µ—Ä—Ç—É
class DriverEdit(StatesGroup):
    change_datetime = State()
    change_direction = State()
    change_car_model = State()
    change_car_number = State()
    change_seats = State()

@dp.callback_query(F.data == "driver_change_datetime")
async def driver_change_datetime_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìÖ –ñ–∞“£–∞ –∫“Ø–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=datetime_keyboard(show_back_to_direction=False)
    )
    await state.set_state(DriverEdit.change_datetime)
    await callback.answer()

@dp.callback_query(DriverEdit.change_datetime, F.data.startswith("dt_date_"))
async def driver_new_date(callback: types.CallbackQuery, state: FSMContext):
    date_str = callback.data.replace("dt_date_", "")
    await state.update_data(departure_date=date_str)
    date_display = format_date_display(date_str)
    
    await callback.message.edit_text(
        f"‚úÖ –ö“Ø–Ω—ñ: {date_display}\n\n"
        "üïê –ñ–∞“£–∞ —É–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=time_keyboard(date_str)
    )
    await callback.answer()

@dp.callback_query(DriverEdit.change_datetime, F.data.startswith("dt_time_"))
async def driver_new_time(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    time_str = parts[-1]
    data = await state.get_data()
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    
    # –ñ–∞“£–∞ –∫–µ–∑–µ–∫ –ø–æ–∑–∏—Ü–∏—è—Å—ã–Ω –∞–Ω—ã“õ—Ç–∞—É
    c.execute("""SELECT MAX(queue_position) FROM drivers 
                 WHERE direction = (SELECT direction FROM drivers WHERE user_id = ?)
                 AND departure_date = ?""", 
              (callback.from_user.id, data['departure_date']))
    max_pos = c.fetchone()[0]
    new_queue_pos = (max_pos or 0) + 1
    
    # ”®–∑–≥–µ—Ä—Ç—É
    c.execute('''UPDATE drivers 
                 SET departure_date = ?, departure_time = ?, queue_position = ?
                 WHERE user_id = ?''',
              (data['departure_date'], time_str, new_queue_pos, callback.from_user.id))
    conn.commit()
    conn.close()
    
    date_display = format_date_display(data['departure_date'])
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ö“Ø–Ω –º–µ–Ω —É–∞“õ—ã—Ç ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ!</b>\n\n"
        f"üìÖ –ñ–∞“£–∞ –∫“Ø–Ω: {date_display}\n"
        f"üïê –ñ–∞“£–∞ —É–∞“õ—ã—Ç: {time_str}\n"
        f"üìä –ñ–∞“£–∞ –∫–µ–∑–µ–∫: ‚Ññ{new_queue_pos}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ü—Ä–æ—Ñ–∏–ª—å–≥–µ", callback_data="back_to_driver_profile")]
        ]),
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()

# –ë–∞“ì—ã—Ç ”©–∑–≥–µ—Ä—Ç—É
@dp.callback_query(F.data == "driver_change_direction")
async def driver_change_direction_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîÑ –ñ–∞“£–∞ –±–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=direction_keyboard()
    )
    await state.set_state(DriverEdit.change_direction)
    await callback.answer()

@dp.callback_query(DriverEdit.change_direction, F.data.startswith("dir_"))
async def driver_new_direction(callback: types.CallbackQuery, state: FSMContext):
    direction = "–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É" if callback.data == "dir_shetpe_aktau" else "–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ"
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    
    # –ñ–∞“£–∞ –±–∞“ì—ã—Ç –±–æ–π—ã–Ω—à–∞ –∫–µ–∑–µ–∫
    c.execute("SELECT departure_date FROM drivers WHERE user_id = ?", (callback.from_user.id,))
    current_date = c.fetchone()[0]
    
    c.execute("""SELECT MAX(queue_position) FROM drivers 
                 WHERE direction = ? AND departure_date = ?""", (direction, current_date))
    max_pos = c.fetchone()[0]
    new_queue_pos = (max_pos or 0) + 1
    
    c.execute('''UPDATE drivers 
                 SET direction = ?, queue_position = ?
                 WHERE user_id = ?''',
              (direction, new_queue_pos, callback.from_user.id))
    conn.commit()
    conn.close()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ë–∞“ì—ã—Ç ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ!</b>\n\n"
        f"üìç –ñ–∞“£–∞ –±–∞“ì—ã—Ç: {direction}\n"
        f"üìä –ñ–∞“£–∞ –∫–µ–∑–µ–∫: ‚Ññ{new_queue_pos}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ü—Ä–æ—Ñ–∏–ª—å–≥–µ", callback_data="back_to_driver_profile")]
        ]),
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()

# –ö”©–ª—ñ–∫ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ–Ω ”©–∑–≥–µ—Ä—Ç—É
@dp.callback_query(F.data == "driver_change_car")
async def driver_change_car_start(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöó –ö”©–ª—ñ–∫ –º–∞—Ä–∫–∞—Å—ã", callback_data="change_car_model")],
        [InlineKeyboardButton(text="üî¢ –ö”©–ª—ñ–∫ –Ω”©–º—ñ—Ä—ñ", callback_data="change_car_number")],
        [InlineKeyboardButton(text="üí∫ –û—Ä—ã–Ω —Å–∞–Ω—ã", callback_data="change_seats")],
        [InlineKeyboardButton(text="üîô –ü—Ä–æ—Ñ–∏–ª—å–≥–µ", callback_data="back_to_driver_profile")]
    ])
    
    await callback.message.edit_text(
        "üöó <b>–ö”©–ª—ñ–∫ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ–Ω ”©–∑–≥–µ—Ä—Ç—É</b>\n\n"
        "–ù–µ ”©–∑–≥–µ—Ä—Ç–∫—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "change_car_model")
async def change_car_model_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üöó –ñ–∞“£–∞ –∫”©–ª—ñ–∫ –º–∞—Ä–∫–∞—Å—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
        "(–ú—ã—Å–∞–ª—ã: Toyota Camry)"
    )
    await state.set_state(DriverEdit.change_car_model)
    await callback.answer()

@dp.message(DriverEdit.change_car_model)
async def change_car_model_save(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute("UPDATE drivers SET car_model = ? WHERE user_id = ?", 
              (message.text, message.from_user.id))
    conn.commit()
    conn.close()
    
    await message.answer(
        f"‚úÖ –ö”©–ª—ñ–∫ –º–∞—Ä–∫–∞—Å—ã ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ: {message.text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ü—Ä–æ—Ñ–∏–ª—å–≥–µ", callback_data="back_to_driver_profile")]
        ])
    )
    await state.clear()

@dp.callback_query(F.data == "change_car_number")
async def change_car_number_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üî¢ –ñ–∞“£–∞ –∫”©–ª—ñ–∫ –Ω”©–º—ñ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
        "(–ú—ã—Å–∞–ª—ã: 870 ABC 09)"
    )
    await state.set_state(DriverEdit.change_car_number)
    await callback.answer()

@dp.message(DriverEdit.change_car_number)
async def change_car_number_save(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute("UPDATE drivers SET car_number = ? WHERE user_id = ?", 
              (message.text, message.from_user.id))
    conn.commit()
    conn.close()
    
    await message.answer(
        f"‚úÖ –ö”©–ª—ñ–∫ –Ω”©–º—ñ—Ä—ñ ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ: {message.text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ü—Ä–æ—Ñ–∏–ª—å–≥–µ", callback_data="back_to_driver_profile")]
        ])
    )
    await state.clear()

@dp.callback_query(F.data == "change_seats")
async def change_seats_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí∫ –ñ–∞“£–∞ –æ—Ä—ã–Ω —Å–∞–Ω—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
        "(1-–¥–µ–Ω 8-–≥–µ –¥–µ–π—ñ–Ω)"
    )
    await state.set_state(DriverEdit.change_seats)
    await callback.answer()

@dp.message(DriverEdit.change_seats)
async def change_seats_save(message: types.Message, state: FSMContext):
    try:
        seats = int(message.text)
        if seats < 1 or seats > 8:
            await message.answer("‚ùå –û—Ä—ã–Ω —Å–∞–Ω—ã 1-–¥–µ–Ω 8-–≥–µ –¥–µ–π—ñ–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫!")
            return
        
        conn = sqlite3.connect('taxi_bot.db')
        c = conn.cursor()
        c.execute("UPDATE drivers SET total_seats = ? WHERE user_id = ?", 
                  (seats, message.from_user.id))
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –û—Ä—ã–Ω —Å–∞–Ω—ã ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ: {seats}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ü—Ä–æ—Ñ–∏–ª—å–≥–µ", callback_data="back_to_driver_profile")]
            ])
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –¢–µ–∫ —Å–∞–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑!")

# –¢—ñ—Ä–∫–µ—É–¥–µ–Ω —à—ã“ì—É
@dp.callback_query(F.data == "driver_unregister")
async def driver_unregister_confirm(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ò”ô, —à—ã“ì–∞–º—ã–Ω", callback_data="driver_unregister_yes")],
        [InlineKeyboardButton(text="‚ùå –ñ–æ“õ, “õ–∞–ª—É", callback_data="back_to_driver_profile")]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–¢—ñ—Ä–∫–µ—É–¥–µ–Ω —à—ã“ì—É</b>\n\n"
        "–°—ñ–∑ —à—ã–Ω—ã–º–µ–Ω –∂“Ø—Ä–≥—ñ–∑—É—à—ñ —Ç—ñ—Ä–∫–µ—É—ñ–Ω–µ–Ω —à—ã“ì“ì—ã“£—ã–∑ –∫–µ–ª–µ –º–µ?\n\n"
        "‚ùóÔ∏è –ë–∞—Ä–ª—ã“õ –±—Ä–æ–Ω–¥–∞—Ä –∂–æ–π—ã–ª–∞–¥—ã!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "driver_unregister_yes")
async def driver_unregister_execute(callback: types.CallbackQuery):
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    
    # –ë—Ä–æ–Ω–¥–∞—Ä–¥—ã –∂–æ—é
    c.execute("DELETE FROM bookings WHERE driver_id = ?", (callback.from_user.id,))
    
    # –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–Ω—ñ –∂–æ—é
    c.execute("DELETE FROM drivers WHERE user_id = ?", (callback.from_user.id,))
    
    conn.commit()
    conn.close()
    
    await callback.message.delete()
    await callback.message.answer(
        "‚úÖ –°—ñ–∑ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ —Ç—ñ—Ä–∫–µ—É—ñ–Ω–µ–Ω —à—ã“õ—Ç—ã“£—ã–∑.\n\n"
        "“ö–∞–π—Ç–∞ —Ç—ñ—Ä–∫–µ–ª—É “Ø—à—ñ–Ω 'üöó –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ä–µ—Ç—ñ–Ω–¥–µ –∫—ñ—Ä—É' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

# –ü—Ä–æ—Ñ–∏–ª—å–≥–µ “õ–∞–π—Ç—É
@dp.callback_query(F.data == "back_to_driver_profile")
async def back_to_driver_profile(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    # driver_profile —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω—ã“£ –º–∞–∑–º“±–Ω—ã–Ω “õ–∞–π—Ç–∞–ª–∞—É
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute("SELECT * FROM drivers WHERE user_id=?", (callback.from_user.id,))
    driver = c.fetchone()
    conn.close()
    
    if not driver:
        await callback.message.edit_text("‚ùå “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã.")
        return
    
    date_display = format_date_display(driver[6])
    status = "‚úÖ –ë–µ–ª—Å–µ–Ω–¥—ñ" if driver[9] else "‚è≥ –ö“Ø—Ç—ñ–ª—É–¥–µ"
    payment = "‚úÖ –¢”©–ª–µ–Ω–≥–µ–Ω" if driver[10] else "‚ùå –¢”©–ª–µ–Ω–±–µ–≥–µ–Ω"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ú–µ–Ω—ñ“£ –∂–æ–ª–∞—É—à—ã–ª–∞—Ä—ã–º", callback_data="driver_passengers")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ö“Ø–Ω/—É–∞“õ—ã—Ç ”©–∑–≥–µ—Ä—Ç—É", callback_data="driver_change_datetime")],
        [InlineKeyboardButton(text="üîÑ –ë–∞“ì—ã—Ç ”©–∑–≥–µ—Ä—Ç—É", callback_data="driver_change_direction")],
        [InlineKeyboardButton(text="üöó –ö”©–ª—ñ–∫ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ–Ω ”©–∑–≥–µ—Ä—Ç—É", callback_data="driver_change_car")],
        [InlineKeyboardButton(text="‚ùå –¢—ñ—Ä–∫–µ—É–¥–µ–Ω —à—ã“ì—É", callback_data="driver_unregister")],
        [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(
        f"üöó <b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ –ø—Ä–æ—Ñ–∏–ª—ñ</b>\n\n"
        f"üë§ –ê—Ç—ã-–∂”©–Ω—ñ: {driver[1]}\n"
        f"üöô –ö”©–ª—ñ–∫: {driver[3]} ({driver[2]})\n"
        f"üí∫ –û—Ä—ã–Ω —Å–∞–Ω—ã: {driver[4]}\n"
        f"üìç –ë–∞“ì—ã—Ç: {driver[5]}\n"
        f"üìÖ –ö“Ø–Ω—ñ: {date_display}\n"
        f"üïê –®—ã“ì—É —É–∞“õ—ã—Ç—ã: {driver[7]}\n"
        f"üìä –ö–µ–∑–µ–∫—Ç–µ–≥—ñ –æ—Ä—ã–Ω: ‚Ññ{driver[8]}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üí∞ –¢”©–ª–µ–º: {payment}\n\n"
        "–ë–∞—Å“õ–∞—Ä—É –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–Ü ====================

# –ê–¥–º–∏–Ω –º”ô–∑—ñ—Ä—ñ
def admin_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ", callback_data="admin_drivers")],
            [InlineKeyboardButton(text="üßç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ", callback_data="admin_clients")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üí∞ –¢”©–ª–µ–º–¥–µ—Ä", callback_data="admin_payments")],
            [InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω–¥–µ—Ä", callback_data="admin_list")],
            [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="back_main")]
        ]
    )
    return keyboard

# /admin –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –°—ñ–∑–¥–µ –∞–¥–º–∏–Ω “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ</b>\n\n"
        "–ë–∞—Å“õ–∞—Ä—É –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )

# –ê–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ
@dp.callback_query(F.data == "admin_list")
async def admin_list_view(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT user_id, added_at FROM admins ORDER BY added_at")
    admins = c.fetchall()
    conn.close()
    
    msg = "üëë <b>–ê–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ:</b>\n\n"
    
    for i, admin in enumerate(admins, 1):
        msg += f"{i}. User ID: <code>{admin[0]}</code>\n"
        if admin[1]:
            date = datetime.fromisoformat(admin[1]).strftime('%d.%m.%Y')
            msg += f"   üìÖ “ö–æ—Å—ã–ª“ì–∞–Ω: {date}\n"
        msg += "\n"
    
    msg += f"<b>–ñ–∞–ª–ø—ã:</b> {len(admins)} –∞–¥–º–∏–Ω\n\n"
    msg += "üí° –ñ–∞“£–∞ –∞–¥–º–∏–Ω “õ–æ—Å—É “Ø—à—ñ–Ω:\n"
    msg += "<code>/addadmin USER_ID</code>"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –ê–¥–º–∏–Ω “õ–æ—Å—É –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message(Command("addadmin"))
async def add_admin_command(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –°—ñ–∑–¥–µ –∞–¥–º–∏–Ω “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return
    
    # –ö–æ–º–∞–Ω–¥–∞–¥–∞–Ω User ID –∞–ª—É
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer(
            "‚ùå <b>“ö–∞—Ç–µ —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–î“±—Ä—ã—Å –ø–∞–π–¥–∞–ª–∞–Ω—É:\n"
            "<code>/addadmin USER_ID</code>\n\n"
            "–ú—ã—Å–∞–ª—ã:\n"
            "<code>/addadmin 123456789</code>\n\n"
            "üí° User ID —Ç–∞–±—É “Ø—à—ñ–Ω:\n"
            "1. @userinfobot –±–æ—Ç—ã–Ω–∞ ”©—Ç—ñ“£—ñ–∑\n"
            "2. /start –∂—ñ–±–µ—Ä—ñ“£—ñ–∑",
            parse_mode="HTML"
        )
        return
    
    try:
        new_admin_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå User ID —Ç–µ–∫ —Å–∞–Ω–¥–∞—Ä–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫!")
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    try:
        c.execute("INSERT INTO admins (user_id) VALUES (?)", (new_admin_id,))
        conn.commit()
        
        await message.answer(
            f"‚úÖ <b>–ñ–∞“£–∞ –∞–¥–º–∏–Ω “õ–æ—Å—ã–ª–¥—ã!</b>\n\n"
            f"üë§ User ID: <code>{new_admin_id}</code>\n\n"
            f"–ï–Ω–¥—ñ –±“±–ª “õ–æ–ª–¥–∞–Ω—É—à—ã /admin –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω–∞ –∞–ª–∞–¥—ã.",
            parse_mode="HTML"
        )
        
        # –ñ–∞“£–∞ –∞–¥–º–∏–Ω–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
        try:
            await bot.send_message(
                new_admin_id,
                "üéâ <b>–°—ñ–∑–≥–µ –∞–¥–º–∏–Ω “õ“±“õ—ã“ì—ã –±–µ—Ä—ñ–ª–¥—ñ!</b>\n\n"
                "–ï–Ω–¥—ñ —Å—ñ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω–∞ –∞–ª–∞—Å—ã–∑:\n"
                "/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ–Ω –∞—à—É\n\n"
                "–ñ–∞—É–∞–ø–∫–µ—Ä—à—ñ–ª—ñ–∫–ø–µ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑! üîê",
                parse_mode="HTML"
            )
        except:
            await message.answer(
                "‚ö†Ô∏è –ñ–∞“£–∞ –∞–¥–º–∏–Ω–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ –∞–ª–º–∞–¥—ã–º.\n"
                "–û–ª ”ô–ª—ñ –±–æ—Ç—Ç—ã –±–∞—Å—Ç–∞–º–∞“ì–∞–Ω —à—ã“ì–∞—Ä (/start)."
            )
            
    except sqlite3.IntegrityError:
        await message.answer(
            f"‚ùå User ID <code>{new_admin_id}</code> “õ–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ –∞–¥–º–∏–Ω!",
            parse_mode="HTML"
        )
    finally:
        conn.close()

# –ê–¥–º–∏–Ω–¥—ñ –∂–æ—é –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message(Command("removeadmin"))
async def remove_admin_command(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –°—ñ–∑–¥–µ –∞–¥–º–∏–Ω “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return
    
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer(
            "‚ùå <b>“ö–∞—Ç–µ —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–î“±—Ä—ã—Å –ø–∞–π–¥–∞–ª–∞–Ω—É:\n"
            "<code>/removeadmin USER_ID</code>\n\n"
            "–ú—ã—Å–∞–ª—ã:\n"
            "<code>/removeadmin 123456789</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        admin_to_remove = int(parts[1])
    except ValueError:
        await message.answer("‚ùå User ID —Ç–µ–∫ —Å–∞–Ω–¥–∞—Ä–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫!")
        return
    
    # ”®–∑—ñ–Ω –∂–æ—é“ì–∞ —Ç—ã–π—ã–º —Å–∞–ª—É
    if admin_to_remove == message.from_user.id:
        await message.answer("‚ùå ”®–∑—ñ“£—ñ–∑–¥—ñ –∞–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ–Ω –∂–æ—è –∞–ª–º–∞–π—Å—ã–∑!")
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    # –¢–µ–∫—Å–µ—Ä—É
    c.execute("SELECT COUNT(*) FROM admins WHERE user_id=?", (admin_to_remove,))
    exists = c.fetchone()[0]
    
    if not exists:
        await message.answer(
            f"‚ùå User ID <code>{admin_to_remove}</code> –∞–¥–º–∏–Ω –µ–º–µ—Å!",
            parse_mode="HTML"
        )
        conn.close()
        return
    
    # –ñ–æ—é
    c.execute("DELETE FROM admins WHERE user_id=?", (admin_to_remove,))
    conn.commit()
    conn.close()
    
    await message.answer(
        f"‚úÖ <b>–ê–¥–º–∏–Ω –∂–æ–π—ã–ª–¥—ã!</b>\n\n"
        f"üë§ User ID: <code>{admin_to_remove}</code>\n\n"
        f"–ë“±–ª “õ–æ–ª–¥–∞–Ω—É—à—ã –µ–Ω–¥—ñ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω–∞ –∞–ª–º–∞–π–¥—ã.",
        parse_mode="HTML"
    )
    
    # –ñ–æ–π—ã–ª“ì–∞–Ω –∞–¥–º–∏–Ω–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞
    try:
        await bot.send_message(
            admin_to_remove,
            "‚ö†Ô∏è <b>–ê–¥–º–∏–Ω “õ“±“õ—ã“ì—ã“£—ã–∑ –∞–ª—ã–Ω—ã–ø —Ç–∞—Å—Ç–∞–ª–¥—ã!</b>\n\n"
            "–ï–Ω–¥—ñ —Å—ñ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω–∞ –∞–ª–º–∞–π—Å—ã–∑.",
            parse_mode="HTML"
        )
    except:
        pass

# ==================== –°–û“¢–´ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–Ü ====================

# –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ
@dp.callback_query(F.data == "admin_drivers")
async def admin_drivers_list(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute('''SELECT user_id, full_name, car_model, car_number, 
                        direction, departure_date, departure_time, queue_position, 
                        is_active, payment_status
                 FROM drivers
                 ORDER BY direction, departure_date, queue_position''')
    drivers = c.fetchall()
    conn.close()
    
    if not drivers:
        await callback.message.edit_text(
            "‚ùå –¢—ñ—Ä–∫–µ–ª–≥–µ–Ω –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä –∂–æ“õ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
            ])
        )
        return
    
    msg = "üë• <b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ:</b>\n\n"
    
    current_direction = None
    for driver in drivers:
        if driver[4] != current_direction:
            current_direction = driver[4]
            msg += f"\nüìç <b>{current_direction}</b>\n\n"
        
        status = "‚úÖ –ë–µ–ª—Å–µ–Ω–¥—ñ" if driver[8] else "‚ùå –ë–µ–ª—Å–µ–Ω–¥—ñ –µ–º–µ—Å"
        payment = "‚úÖ –¢”©–ª–µ–Ω–≥–µ–Ω" if driver[9] else "‚ùå –¢”©–ª–µ–Ω–±–µ–≥–µ–Ω"
        date_display = format_date_display(driver[5])
        
        msg += f"<b>‚Ññ{driver[7]}</b> - {driver[1]}\n"
        msg += f"   üöó {driver[2]} ({driver[3]})\n"
        msg += f"   üìÖ {date_display} | üïê {driver[6]}\n"
        msg += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        msg += f"   üí∞ –¢”©–ª–µ–º: {payment}\n"
        msg += f"   üÜî ID: <code>{driver[0]}</code>\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ
@dp.callback_query(F.data == "admin_clients")
async def admin_clients_list(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute('''SELECT c.user_id, c.full_name, COUNT(b.id) as total_bookings
                 FROM clients c
                 LEFT JOIN bookings b ON c.id = b.client_id
                 GROUP BY c.id
                 ORDER BY total_bookings DESC''')
    clients = c.fetchall()
    conn.close()
    
    if not clients:
        await callback.message.edit_text(
            "‚ùå –¢—ñ—Ä–∫–µ–ª–≥–µ–Ω –∫–ª–∏–µ–Ω—Ç—Ç–µ—Ä –∂–æ“õ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
            ])
        )
        return
    
    msg = "üßç‚Äç‚ôÇÔ∏è <b>–ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ:</b>\n\n"
    
    for i, client in enumerate(clients, 1):
        msg += f"{i}. {client[1]}\n"
        msg += f"   üìä –ë—Ä–æ–Ω–¥–∞—Ä: {client[2]}\n"
        msg += f"   üÜî ID: <code>{client[0]}</code>\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.callback_query(F.data == "admin_stats")
async def admin_statistics(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    # –ñ–∞–ª–ø—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute("SELECT COUNT(*) FROM drivers")
    total_drivers = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM drivers WHERE is_active=1")
    active_drivers = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM clients")
    total_clients = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM bookings WHERE status='active'")
    active_bookings = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM drivers WHERE payment_status=1")
    paid_drivers = c.fetchone()[0]
    
    # –ë–∞“ì—ã—Ç—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞
    c.execute('''SELECT direction, COUNT(*) 
                 FROM drivers 
                 WHERE is_active=1 
                 GROUP BY direction''')
    directions = c.fetchall()
    
    # –ë“Ø–≥—ñ–Ω–≥—ñ –±—Ä–æ–Ω–¥–∞—Ä
    c.execute('''SELECT COUNT(*) 
                 FROM bookings 
                 WHERE DATE(booking_time) = DATE('now')''')
    today_bookings = c.fetchone()[0]
    
    conn.close()
    
    msg = "üìä <b>–ñ“Ø–π–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã</b>\n\n"
    msg += f"üë• <b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä:</b>\n"
    msg += f"   ‚Ä¢ –ñ–∞–ª–ø—ã: {total_drivers}\n"
    msg += f"   ‚Ä¢ –ë–µ–ª—Å–µ–Ω–¥—ñ: {active_drivers}\n"
    msg += f"   ‚Ä¢ –¢”©–ª–µ–º –∂–∞—Å–∞“ì–∞–Ω: {paid_drivers}\n\n"
    
    msg += f"üßç‚Äç‚ôÇÔ∏è <b>–ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä:</b> {total_clients}\n\n"
    
    msg += f"üìã <b>–ë—Ä–æ–Ω–¥–∞—Ä:</b>\n"
    msg += f"   ‚Ä¢ –ê–∫—Ç–∏–≤—Ç—ñ: {active_bookings}\n"
    msg += f"   ‚Ä¢ –ë“Ø–≥—ñ–Ω: {today_bookings}\n\n"
    
    if directions:
        msg += "üìç <b>–ë–∞“ì—ã—Ç—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞:</b>\n"
        for direction in directions:
            msg += f"   ‚Ä¢ {direction[0]}: {direction[1]} –∫”©–ª—ñ–∫\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ñ–∞“£–∞—Ä—Ç—É", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –¢”©–ª–µ–º–¥–µ—Ä
@dp.callback_query(F.data == "admin_payments")
async def admin_payments(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute('''SELECT user_id, full_name, car_number, departure_date, departure_time
                 FROM drivers
                 WHERE payment_status = 0
                 ORDER BY created_at DESC''')
    pending_payments = c.fetchall()
    conn.close()
    
    if not pending_payments:
        await callback.message.edit_text(
            "‚úÖ –ë–∞—Ä–ª—ã“õ —Ç”©–ª–µ–º–¥–µ—Ä —Ä–∞—Å—Ç–∞–ª“ì–∞–Ω!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
            ])
        )
        return
    
    msg = "üí∞ <b>–¢”©–ª–µ–Ω–±–µ–≥–µ–Ω –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä:</b>\n\n"
    
    keyboard_buttons = []
    for driver in pending_payments:
        date_display = format_date_display(driver[3])
        msg += f"üë§ {driver[1]}\n"
        msg += f"   üöó {driver[2]}\n"
        msg += f"   üìÖ {date_display} | üïê {driver[4]}\n"
        msg += f"   üÜî ID: <code>{driver[0]}</code>\n\n"
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚úÖ –†–∞—Å—Ç–∞—É: {driver[1]}",
                callback_data=f"payment_approve_{driver[0]}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")])
    
    await callback.message.edit_text(
        msg,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )
    await callback.answer()

# –¢”©–ª–µ–º–¥—ñ —Ä–∞—Å—Ç–∞—É
@dp.callback_query(F.data.startswith("payment_approve_"))
async def approve_payment(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    driver_id = int(callback.data.split("_")[2])
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("UPDATE drivers SET payment_status=1, is_active=1 WHERE user_id=?", (driver_id,))
    conn.commit()
    
    c.execute("SELECT full_name FROM drivers WHERE user_id=?", (driver_id,))
    driver_name = c.fetchone()[0]
    conn.close()
    
    # –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞
    try:
        await bot.send_message(
            driver_id,
            "‚úÖ <b>–¢”©–ª–µ–º—ñ“£—ñ–∑ —Ä–∞—Å—Ç–∞–ª–¥—ã!</b>\n\n"
            "–ö”©–ª—ñ–≥—ñ“£—ñ–∑ –µ–Ω–¥—ñ –±–µ–ª—Å–µ–Ω–¥—ñ.\n"
            "–ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä —Å—ñ–∑–≥–µ –±—Ä–æ–Ω–¥–∞–π –∞–ª–∞–¥—ã.",
            parse_mode="HTML"
        )
    except:
        pass
    
    await callback.answer(f"‚úÖ {driver_name} —Ç”©–ª–µ–º—ñ —Ä–∞—Å—Ç–∞–ª–¥—ã!", show_alert=True)
    
    # –¢”©–ª–µ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ “õ–∞–π—Ç—É
    await admin_payments(callback)

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ–Ω–µ “õ–∞–π—Ç—É
@dp.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ</b>\n\n"
        "–ë–∞—Å“õ–∞—Ä—É –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# ==================== –°–û“¢–´ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–Ü ====================

# –ê–Ω—ã“õ—Ç–∞–º–∞
@dp.message(F.text == "‚ÑπÔ∏è –ê–Ω—ã“õ—Ç–∞–º–∞")
async def info_command(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–ë–æ—Ç —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç:</b>\n\n"
        "üöñ –ë“±–ª –±–æ—Ç –®–µ—Ç–ø–µ-–ê“õ—Ç–∞—É –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã —Ç–∞–∫—Å–∏ “õ—ã–∑–º–µ—Ç—ñ–Ω “±–π—ã–º–¥–∞—Å—Ç—ã—Ä—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω.\n\n"
        "<b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä “Ø—à—ñ–Ω:</b>\n"
        "‚Ä¢ –ö”©–ª—ñ–∫—Ç—ñ –∂“Ø–π–µ–≥–µ —Ç—ñ—Ä–∫–µ—É\n"
        "‚Ä¢ –ö“Ø–Ω –º–µ–Ω —É–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞—É\n"
        "‚Ä¢ –ö–µ–∑–µ–∫—Ç—ñ –±–∞“õ—ã–ª–∞—É\n"
        "‚Ä¢ –û—Ä—ã–Ω —Ç–æ–ª“ì–∞–Ω–¥–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∞–ª—É\n"
        "‚Ä¢ /driver - –ü—Ä–æ—Ñ–∏–ª—å–¥—ñ –±–∞—Å“õ–∞—Ä—É\n\n"
        "<b>–ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä “Ø—à—ñ–Ω:</b>\n"
        "‚Ä¢ 7 –∫“Ø–Ω–≥–µ –¥–µ–π—ñ–Ω –∞–ª–¥—ã–Ω –∞–ª–∞ –±—Ä–æ–Ω–¥–∞—É\n"
        "‚Ä¢ “ö–æ–ª–∞–π–ª—ã —É–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞—É\n"
        "‚Ä¢ –ú—ñ–Ω–µ—Ç—ñ–Ω/—Ç“Ø—Å–µ—Ç—ñ–Ω –∂–µ—Ä–¥—ñ –±–µ–ª–≥—ñ–ª–µ—É\n"
        "‚Ä¢ –ë—Ä–æ–Ω–¥–∞—Ä–¥—ã –±–∞“õ—ã–ª–∞—É\n\n"
        "<b>“ö–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ:</b>\n"
        f"üìû –ë–∞–π–ª–∞–Ω—ã—Å: {SUPPORT_USERNAME}\n\n"
        "–°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, “õ–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ–Ω–µ –∂–∞–∑—ã“£—ã–∑! üëã",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )

# –ë–∞—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    init_db()
    print("üöÄ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())