import asyncio
import sqlite3
import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import random
import string

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
DATABASE_FILE = os.getenv("DATABASE_FILE", "taxi_bot.db")
SMS_API_KEY = os.getenv("SMS_API_KEY", "")  # –î–ª—è SMS —Å–µ—Ä–≤–∏—Å–∞

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('taxi_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def log_action(user_id: int, action: str, details: str = ""):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_msg = f"[{timestamp}] User {user_id}: {action}"
    if details:
        log_msg += f" | {details}"
    logger.info(log_msg)

# ==================== –£–¢–ò–õ–ò–¢–´ SMS ====================

def generate_verification_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"""
    return ''.join(random.choices(string.digits, k=4))

async def send_sms(phone: str, message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å"""
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –≤–∞—à–µ–≥–æ SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞: Nexmo, Twilio, –º–µ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    logger.info(f"SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}: {message}")
    # return await actual_sms_service.send(phone, message)
    return True

# ==================== –ë–î –ò –ú–ò–ì–†–ê–¶–ò–ò ====================

class DBMigration:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ë–î"""
    
    @staticmethod
    def get_db_version() -> int:
        conn = sqlite3.connect(DATABASE_FILE)
        c = conn.cursor()
        c.execute("PRAGMA user_version")
        version = c.fetchone()[0]
        conn.close()
        return version
    
    @staticmethod
    def set_db_version(version: int):
        conn = sqlite3.connect(DATABASE_FILE)
        c = conn.cursor()
        c.execute(f"PRAGMA user_version = {version}")
        conn.commit()
        conn.close()
    
    @staticmethod
    def migrate():
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        current_version = DBMigration.get_db_version()
        
        if current_version < 1:
            DBMigration.migration_v1()
        if current_version < 2:
            DBMigration.migration_v2()
        if current_version < 3:
            DBMigration.migration_v3()
    
    @staticmethod
    def migration_v1():
        """–ú–∏–≥—Ä–∞—Ü–∏—è v1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        logger.info("–ü—Ä–∏–º–µ–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é v1...")
        conn = sqlite3.connect(DATABASE_FILE)
        c = conn.cursor()
        
        c.execute('''CREATE TABLE IF NOT EXISTS drivers
                     (user_id INTEGER PRIMARY KEY,
                      full_name TEXT NOT NULL,
                      phone TEXT NOT NULL,
                      car_number TEXT NOT NULL,
                      car_model TEXT NOT NULL,
                      total_seats INTEGER NOT NULL,
                      direction TEXT NOT NULL,
                      queue_position INTEGER NOT NULL,
                      is_active INTEGER DEFAULT 0,
                      is_verified INTEGER DEFAULT 0,
                      verification_code TEXT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS clients
                     (user_id INTEGER PRIMARY KEY,
                      full_name TEXT NOT NULL,
                      phone TEXT NOT NULL,
                      direction TEXT NOT NULL,
                      queue_position INTEGER NOT NULL,
                      passengers_count INTEGER DEFAULT 1,
                      pickup_location TEXT NOT NULL,
                      dropoff_location TEXT NOT NULL,
                      is_verified INTEGER DEFAULT 0,
                      verification_code TEXT,
                      status TEXT DEFAULT 'waiting',
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS admins
                     (user_id INTEGER PRIMARY KEY,
                      added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        conn.commit()
        conn.close()
        DBMigration.set_db_version(1)
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è v1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    @staticmethod
    def migration_v2():
        """–ú–∏–≥—Ä–∞—Ü–∏—è v2: –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã"""
        logger.info("–ü—Ä–∏–º–µ–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é v2...")
        conn = sqlite3.connect(DATABASE_FILE)
        c = conn.cursor()
        
        c.execute('''CREATE TABLE IF NOT EXISTS ratings
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      from_user_id INTEGER,
                      to_user_id INTEGER,
                      user_type TEXT,
                      rating INTEGER CHECK(rating >= 1 AND rating <= 5),
                      review TEXT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–∏
        c.execute("PRAGMA table_info(drivers)")
        driver_columns = [column[1] for column in c.fetchall()]
        if 'avg_rating' not in driver_columns:
            c.execute("ALTER TABLE drivers ADD COLUMN avg_rating REAL DEFAULT 0")
        if 'rating_count' not in driver_columns:
            c.execute("ALTER TABLE drivers ADD COLUMN rating_count INTEGER DEFAULT 0")
        
        c.execute("PRAGMA table_info(clients)")
        client_columns = [column[1] for column in c.fetchall()]
        if 'avg_rating' not in client_columns:
            c.execute("ALTER TABLE clients ADD COLUMN avg_rating REAL DEFAULT 0")
        if 'rating_count' not in client_columns:
            c.execute("ALTER TABLE clients ADD COLUMN rating_count INTEGER DEFAULT 0")
        
        conn.commit()
        conn.close()
        DBMigration.set_db_version(2)
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è v2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    @staticmethod
    def migration_v3():
        """–ú–∏–≥—Ä–∞—Ü–∏—è v3: –ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫ –∏ –æ—Ç–º–µ–Ω—ã"""
        logger.info("–ü—Ä–∏–º–µ–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é v3...")
        conn = sqlite3.connect(DATABASE_FILE)
        c = conn.cursor()
        
        c.execute('''CREATE TABLE IF NOT EXISTS trips
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      driver_id INTEGER,
                      client_id INTEGER,
                      direction TEXT,
                      pickup_location TEXT,
                      dropoff_location TEXT,
                      passengers_count INTEGER,
                      status TEXT,
                      driver_arrived_at TIMESTAMP,
                      trip_started_at TIMESTAMP,
                      trip_completed_at TIMESTAMP,
                      cancelled_by TEXT,
                      cancelled_at TIMESTAMP,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS actions_log
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      action TEXT,
                      details TEXT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        conn.commit()
        conn.close()
        DBMigration.set_db_version(3)
        logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è v3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
    DBMigration.migrate()

# ==================== –£–¢–ò–õ–ò–¢–´ ====================

def is_admin(user_id: int) -> bool:
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT user_id FROM admins WHERE user_id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

def save_log_action(user_id: int, action: str, details: str = ""):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î"""
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute('''INSERT INTO actions_log (user_id, action, details) 
                 VALUES (?, ?, ?)''', (user_id, action, details))
    conn.commit()
    conn.close()
    log_action(user_id, action, details)

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöó –Ø –≤–æ–¥–∏—Ç–µ–ª—å")],
            [KeyboardButton(text="üßç‚Äç‚ôÇÔ∏è –ú–Ω–µ –Ω—É–∂–Ω–æ —Ç–∞–∫—Å–∏")],
            [KeyboardButton(text="‚≠ê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )

def direction_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É", callback_data="dir_shetpe_aktau")],
            [InlineKeyboardButton(text="–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ", callback_data="dir_aktau_shetpe")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
    )

def get_rating_stars(rating: float) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∑–≤–µ–∑–¥—ã"""
    if not rating:
        return "‚ùå –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    stars = int(rating)
    return "‚≠ê" * stars + "‚òÜ" * (5 - stars)

# ==================== –í–û–î–ò–¢–ï–õ–ò ====================

class DriverReg(StatesGroup):
    phone = State()
    verify_code = State()
    full_name = State()
    car_number = State()
    car_model = State()
    seats = State()
    direction = State()

@dp.message(F.text == "üöó –Ø –≤–æ–¥–∏—Ç–µ–ª—å")
async def driver_start(message: types.Message, state: FSMContext):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM drivers WHERE user_id=?", (message.from_user.id,))
    driver = c.fetchone()
    conn.close()
    
    if driver and driver[9]:  # is_verified
        await show_driver_menu(message, message.from_user.id)
        return
    
    if driver and not driver[9]:
        await message.answer(
            "‚è≥ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:"
        )
        await state.set_state(DriverReg.verify_code)
        return
    
    await message.answer(
        "üöó <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
        parse_mode="HTML"
    )
    await state.set_state(DriverReg.phone)

@dp.message(DriverReg.phone)
async def driver_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if not phone.startswith('+7') or len(phone) != 12:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7XXXXXXXXXX")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT user_id FROM drivers WHERE phone=?", (phone,))
    existing = c.fetchone()
    conn.close()
    
    if existing:
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
    code = generate_verification_code()
    await state.update_data(phone=phone, verification_code=code)
    
    await send_sms(phone, f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
    
    await message.answer(
        f"‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:"
    )
    await state.set_state(DriverReg.verify_code)

@dp.message(DriverReg.verify_code)
async def driver_verify(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    if message.text.strip() != data['verification_code']:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!")
        return
    
    await message.answer("‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    await state.set_state(DriverReg.full_name)

@dp.message(DriverReg.full_name)
async def driver_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–ù–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 870 ABC 09)")
    await state.set_state(DriverReg.car_number)

@dp.message(DriverReg.car_number)
async def driver_car_number(message: types.Message, state: FSMContext):
    await state.update_data(car_number=message.text)
    await message.answer("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Toyota Camry)")
    await state.set_state(DriverReg.car_model)

@dp.message(DriverReg.car_model)
async def driver_car_model(message: types.Message, state: FSMContext):
    await state.update_data(car_model=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –≤ –º–∞—à–∏–Ω–µ? (1-8)")
    await state.set_state(DriverReg.seats)

@dp.message(DriverReg.seats)
async def driver_seats(message: types.Message, state: FSMContext):
    try:
        seats = int(message.text)
        if seats < 1 or seats > 8:
            await message.answer("–û—à–∏–±–∫–∞! –ú–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 8")
            return
        await state.update_data(seats=seats)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
            reply_markup=direction_keyboard()
        )
        await state.set_state(DriverReg.direction)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.callback_query(DriverReg.direction, F.data.startswith("dir_"))
async def driver_direction(callback: types.CallbackQuery, state: FSMContext):
    direction = "–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É" if callback.data == "dir_shetpe_aktau" else "–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ"
    data = await state.get_data()
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
    c.execute(
        "SELECT MAX(queue_position) FROM drivers WHERE direction=? AND is_active=1",
        (direction,)
    )
    max_pos = c.fetchone()[0]
    queue_pos = (max_pos or 0) + 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    c.execute('''INSERT INTO drivers 
                 (user_id, full_name, phone, car_number, car_model, total_seats, 
                  direction, queue_position, is_active, is_verified)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1, 1)''',
              (callback.from_user.id, data['full_name'], data['phone'], data['car_number'],
               data['car_model'], data['seats'], direction, queue_pos))
    conn.commit()
    conn.close()
    
    save_log_action(callback.from_user.id, "driver_registered", 
                   f"Direction: {direction}, Queue: {queue_pos}")
    
    await callback.message.edit_text(
        f"‚úÖ <b>–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
        f"üë§ {data['full_name']}\n"
        f"üöó {data['car_model']} ({data['car_number']})\n"
        f"üí∫ –ú–µ—Å—Ç: {data['seats']}\n"
        f"üìç {direction}\n"
        f"üìä –ü–æ–∑–∏—Ü–∏—è: ‚Ññ{queue_pos}\n\n"
        f"‚è≥ –ñ–¥–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤!",
        parse_mode="HTML"
    )
    await state.clear()

async def show_driver_menu(message: types.Message, user_id: int):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM drivers WHERE user_id=?", (user_id,))
    driver = c.fetchone()
    conn.close()
    
    if not driver:
        await message.answer("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=main_menu_keyboard())
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="driver_status")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –ø–∞—Å—Å–∞–∂–∏—Ä—ã", callback_data="driver_passengers")],
        [InlineKeyboardButton(text="üöó –Ø –ø—Ä–∏–µ—Ö–∞–ª!", callback_data="driver_arrived")],
        [InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="driver_exit")],
        [InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="back_main")]
    ])
    
    await message.answer(
        f"üöó <b>–ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
        f"üë§ {driver[1]}\n"
        f"üöó {driver[4]} ({driver[3]})\n"
        f"üí∫ –ú–µ—Å—Ç: {driver[5]}\n"
        f"üìç {driver[6]}\n"
        f"üìä –ü–æ–∑–∏—Ü–∏—è: ‚Ññ{driver[7]}\n"
        f"{get_rating_stars(driver[19] if len(driver) > 19 else 0)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "driver_status")
async def driver_status(callback: types.CallbackQuery):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM drivers WHERE user_id=?", (callback.from_user.id,))
    driver = c.fetchone()
    
    c.execute("SELECT COUNT(*) FROM clients WHERE direction=?", (driver[6],))
    waiting = c.fetchone()[0]
    conn.close()
    
    await callback.message.edit_text(
        f"üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å</b>\n\n"
        f"üöó {driver[4]} ({driver[3]})\n"
        f"üìç {driver[6]}\n"
        f"üìä –ü–æ–∑–∏—Ü–∏—è: ‚Ññ{driver[7]}\n"
        f"‚è≥ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {waiting}\n"
        f"{get_rating_stars(driver[19] if len(driver) > 19 else 0)}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="driver_menu")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "driver_passengers")
async def driver_passengers(callback: types.CallbackQuery):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    c.execute("SELECT direction FROM drivers WHERE user_id=?", (callback.from_user.id,))
    driver_dir = c.fetchone()[0]
    
    c.execute('''SELECT user_id, full_name, pickup_location, dropoff_location, passengers_count
                 FROM clients WHERE direction=? AND status='waiting' ORDER BY queue_position''', (driver_dir,))
    clients = c.fetchall()
    conn.close()
    
    if not clients:
        msg = "‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏"
    else:
        msg = f"üë• <b>–ö–ª–∏–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ ({len(clients)}):</b>\n\n"
        for i, client in enumerate(clients, 1):
            msg += f"{i}. {client[1]} ({client[4]} —á–µ–ª.)\n"
            msg += f"   üìç {client[2]} ‚Üí {client[3]}\n\n"
    
    await callback.message.edit_text(
        msg,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="driver_menu")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "driver_arrived")
async def driver_arrived(callback: types.CallbackQuery):
    """–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–∂–∞–ª —á—Ç–æ –æ–Ω –ø—Ä–∏–µ—Ö–∞–ª"""
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    c.execute("SELECT direction FROM drivers WHERE user_id=?", (callback.from_user.id,))
    driver_dir = c.fetchone()[0]
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    c.execute('''SELECT user_id, full_name, pickup_location, dropoff_location 
                 FROM clients WHERE direction=? AND status='waiting' 
                 ORDER BY queue_position LIMIT 1''', (driver_dir,))
    client = c.fetchone()
    
    if not client:
        await callback.answer("‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏!", show_alert=True)
        conn.close()
        return
    
    client_id = client[0]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
    c.execute("UPDATE clients SET status='driver_arrived' WHERE user_id=?", (client_id,))
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–µ–∑–¥–∫–µ
    c.execute('''INSERT INTO trips (driver_id, client_id, status, driver_arrived_at)
                 SELECT user_id, ?, 'driver_arrived', CURRENT_TIMESTAMP 
                 FROM drivers WHERE user_id=?''', (client_id, callback.from_user.id))
    
    conn.commit()
    conn.close()
    
    save_log_action(callback.from_user.id, "driver_arrived", f"Client: {client_id}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    try:
        await bot.send_message(
            client_id,
            f"üöó <b>–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–µ—Ö–∞–ª!</b>\n\n"
            f"üìç –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: {client[2]}\n"
            f"üÜî –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: —Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è",
            parse_mode="HTML"
        )
    except:
        pass
    
    await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client[1]}", show_alert=True)

@dp.callback_query(F.data == "driver_exit")
async def driver_exit(callback: types.CallbackQuery):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
    c.execute('''SELECT COUNT(*) FROM trips 
                 WHERE driver_id=? AND status IN ('waiting', 'driver_arrived')''', 
              (callback.from_user.id,))
    active_trips = c.fetchone()[0]
    
    if active_trips > 0:
        await callback.answer(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ - –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏!",
            show_alert=True
        )
        conn.close()
        return
    
    c.execute("DELETE FROM drivers WHERE user_id=?", (callback.from_user.id,))
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    c.execute("SELECT DISTINCT direction FROM drivers")
    directions = c.fetchall()
    
    for direction in directions:
        c.execute('''SELECT user_id FROM drivers 
                     WHERE direction=? ORDER BY queue_position''', direction)
        drivers = c.fetchall()
        for pos, driver in enumerate(drivers, 1):
            c.execute("UPDATE drivers SET queue_position=? WHERE user_id=?", (pos, driver[0]))
    
    conn.commit()
    conn.close()
    
    save_log_action(callback.from_user.id, "driver_exit", "")
    
    await callback.message.delete()
    await callback.message.answer(
        "‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "driver_menu")
async def driver_menu_back(callback: types.CallbackQuery):
    await show_driver_menu(callback.message, callback.from_user.id)
    await callback.answer()

# ==================== –ö–õ–ò–ï–ù–¢–´ ====================

class ClientOrder(StatesGroup):
    direction = State()
    passengers_count = State()
    pickup_location = State()
    dropoff_location = State()

@dp.message(F.text == "üßç‚Äç‚ôÇÔ∏è –ú–Ω–µ –Ω—É–∂–Ω–æ —Ç–∞–∫—Å–∏")
async def client_start(message: types.Message, state: FSMContext):
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM clients WHERE user_id=?", (message.from_user.id,))
    client = c.fetchone()
    conn.close()
    
    if client and client[8]:  # is_verified
        if client[10] == 'waiting':  # status
            await message.answer(
                "‚ùå –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!",
                reply_markup=main_menu_keyboard()
            )
            return
    
    if client and not client[8]:
        # –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        code = generate_verification_code()
        await send_sms(client[2], f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
        await message.answer(
            f"‚è≥ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            f"SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {client[2]}\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:"
        )
        await state.set_state(ClientOrder.direction)  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º state
        return
    
    await message.answer(
        "üßç‚Äç‚ôÇÔ∏è <b>–í—ã–∑–æ–≤ —Ç–∞–∫—Å–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
        reply_markup=direction_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ClientOrder.direction)

@dp.callback_query(ClientOrder.direction, F.data.startswith("dir_"))
async def client_direction(callback: types.CallbackQuery, state: FSMContext):
    direction = "–®–µ—Ç–ø–µ ‚Üí –ê“õ—Ç–∞—É" if callback.data == "dir_shetpe_aktau" else "–ê“õ—Ç–∞—É ‚Üí –®–µ—Ç–ø–µ"
    await state.update_data(direction=direction)
    
    await callback.message.edit_text(
        "üë• –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ–µ–¥–µ—Ç? (1-8)"
    )
    await state.set_state(ClientOrder.passengers_count)
    await callback.answer()

@dp.message(ClientOrder.passengers_count)
async def client_passengers_count(message: types.Message, state: FSMContext):
    try:
        count = int(message.text)
        if count < 1 or count > 8:
            await message.answer("–û—à–∏–±–∫–∞! –û—Ç 1 –¥–æ 8 —á–µ–ª–æ–≤–µ–∫")
            return
        await state.update_data(passengers_count=count)
        await message.answer("üìç –û—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å?\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
        await state.set_state(ClientOrder.pickup_location)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(ClientOrder.pickup_location)
async def client_pickup(message: types.Message, state: FSMContext):
    await state.update_data(pickup_location=message.text)
    await message.answer("üìç –ö—É–¥–∞ –≤–∞—Å –≤–µ–∑—Ç–∏?\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    await state.set_state(ClientOrder.dropoff_location)

@dp.message(ClientOrder.dropoff_location)
async def client_dropoff(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    conn = sqlite3.connect(DATABASE_FILE)
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    c.execute("SELECT is_verified FROM clients WHERE user_id=?", (message.from_user.id,))
    existing = c.fetchone()
    
    if existing and not existing[0]:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        code = generate_verification_code()
        c.execute("UPDATE clients SET verification_code=? WHERE user_id=?", 
                 (code, message.from_user.id))
        conn.commit()
        await send_sms(message.from_user.id, f"–ö–æ–¥: {code}")  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ 