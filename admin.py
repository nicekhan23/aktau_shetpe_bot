import sqlite3
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

# ==================== “ö–û–°–´–ú–®–ê –§–£–ù–ö–¶–ò–Ø–õ–ê–† ====================

# –ê–¥–º–∏–Ω–¥–µ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—É
def is_admin(user_id: int, db_file: str = 'taxi_bot.db') -> bool:
    """“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –∞–¥–º–∏–Ω –µ–∫–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä–µ–¥—ñ"""
    conn = sqlite3.connect(db_file)
    c = conn.cursor()
    c.execute("SELECT user_id FROM admins WHERE user_id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

# –ê–¥–º–∏–Ω “õ–æ—Å—É (–∫–æ–Ω—Å–æ–ª—å/—Å–∫—Ä–∏–ø—Ç “Ø—à—ñ–Ω)
def add_admin(user_id: int, db_file: str = 'taxi_bot.db'):
    """–ñ–∞“£–∞ –∞–¥–º–∏–Ω “õ–æ—Å—É (–∫–æ–Ω—Å–æ–ª—å–¥–∞–Ω –Ω–µ–º–µ—Å–µ —Å–∫—Ä–∏–ø—Ç—Ç–µ–Ω)"""
    conn = sqlite3.connect(db_file)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO admins (user_id) VALUES (?)", (user_id,))
        conn.commit()
        print(f"‚úÖ –ê–¥–º–∏–Ω “õ–æ—Å—ã–ª–¥—ã: {user_id}")
        return True
    except sqlite3.IntegrityError:
        print(f"‚ùå –ë“±–ª “õ–æ–ª–¥–∞–Ω—É—à—ã “õ–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ –∞–¥–º–∏–Ω: {user_id}")
        return False
    finally:
        conn.close()

# –ê–¥–º–∏–Ω–¥—ñ –∂–æ—é (–∫–æ–Ω—Å–æ–ª—å/—Å–∫—Ä–∏–ø—Ç “Ø—à—ñ–Ω)
def remove_admin(user_id: int, db_file: str = 'taxi_bot.db'):
    """–ê–¥–º–∏–Ω–¥—ñ –∂–æ—é (–∫–æ–Ω—Å–æ–ª—å–¥–∞–Ω –Ω–µ–º–µ—Å–µ —Å–∫—Ä–∏–ø—Ç—Ç–µ–Ω)"""
    conn = sqlite3.connect(db_file)
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM admins WHERE user_id=?", (user_id,))
    exists = c.fetchone()[0]
    
    if not exists:
        print(f"‚ùå User ID {user_id} –∞–¥–º–∏–Ω –µ–º–µ—Å!")
        conn.close()
        return False
    
    c.execute("DELETE FROM admins WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()
    print(f"‚úÖ –ê–¥–º–∏–Ω –∂–æ–π—ã–ª–¥—ã: {user_id}")
    return True

# –ë–∞—Ä–ª—ã“õ –∞–¥–º–∏–Ω–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É (–∫–æ–Ω—Å–æ–ª—å/—Å–∫—Ä–∏–ø—Ç “Ø—à—ñ–Ω)
def list_admins(db_file: str = 'taxi_bot.db'):
    """–ë–∞—Ä–ª—ã“õ –∞–¥–º–∏–Ω–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç–µ–¥—ñ"""
    conn = sqlite3.connect(db_file)
    c = conn.cursor()
    c.execute("SELECT user_id, added_at FROM admins ORDER BY added_at")
    admins = c.fetchall()
    conn.close()
    
    if not admins:
        print("‚ùå –ê–¥–º–∏–Ω–¥–µ—Ä –∂–æ“õ!")
        return []
    
    print("\nüëë –ê–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ:")
    print("=" * 50)
    for i, admin in enumerate(admins, 1):
        date_str = admin[1] if admin[1] else "–±–µ–ª–≥—ñ—Å—ñ–∑"
        print(f"{i}. User ID: {admin[0]} | “ö–æ—Å—ã–ª“ì–∞–Ω: {date_str}")
    print("=" * 50)
    print(f"–ñ–∞–ª–ø—ã: {len(admins)} –∞–¥–º–∏–Ω\n")
    
    return admins

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–ê–õ–ê–† ====================

# –ê–¥–º–∏–Ω –º”ô–∑—ñ—Ä—ñ
def admin_keyboard():
    """–ù–µ–≥—ñ–∑–≥—ñ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Å—ã"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ", callback_data="admin_drivers")],
            [InlineKeyboardButton(text="üßç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ", callback_data="admin_clients")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üí∞ –¢”©–ª–µ–º–¥–µ—Ä", callback_data="admin_payments")],
            [InlineKeyboardButton(text="üîß –ö–µ–∑–µ–∫ –±–∞—Å“õ–∞—Ä—É", callback_data="admin_queue")],
            [InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω–¥–µ—Ä", callback_data="admin_list")],
            [InlineKeyboardButton(text="üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", callback_data="back_main")]
        ]
    )
    return keyboard

# –ö“Ø–Ω–¥—ñ —Ñ–æ—Ä–º–∞—Ç—Ç–∞—É
def format_date_display(date_str):
    """–ö“Ø–Ω–¥—ñ –∞–¥–∞–º –æ“õ–∏—Ç—ã–Ω —Ñ–æ—Ä–º–∞—Ç“õ–∞ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä–µ–¥—ñ"""
    from datetime import datetime, timedelta
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)
    
    if date_obj.date() == today:
        return f"–ë“Ø–≥—ñ–Ω ({date_obj.strftime('%d.%m.%Y')})"
    elif date_obj.date() == tomorrow:
        return f"–ï—Ä—Ç–µ“£ ({date_obj.strftime('%d.%m.%Y')})"
    else:
        weekdays = ["–î“Ø–π—Å–µ–Ω–±—ñ", "–°–µ–π—Å–µ–Ω–±—ñ", "–°”ô—Ä—Å–µ–Ω–±—ñ", "–ë–µ–π—Å–µ–Ω–±—ñ", "–ñ“±–º–∞", "–°–µ–Ω–±—ñ", "–ñ–µ–∫—Å–µ–Ω–±—ñ"]
        weekday = weekdays[date_obj.weekday()]
        return f"{weekday} ({date_obj.strftime('%d.%m.%Y')})"

# ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–Ü –•–≠–ù–î–õ–ï–†–õ–ï–†–Ü ====================

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ–Ω –∞—à—É
async def admin_panel(message: types.Message):
    """–ù–µ–≥—ñ–∑–≥—ñ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –°—ñ–∑–¥–µ –∞–¥–º–∏–Ω “õ“±“õ—ã“ì—ã –∂–æ“õ.")
        return
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ</b>\n\n"
        "–ë–∞—Å“õ–∞—Ä—É –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )

# –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ
async def admin_drivers_list(callback: types.CallbackQuery):
    """–ë–∞—Ä–ª—ã“õ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç–µ–¥—ñ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute('''SELECT user_id, full_name, car_model, car_number, 
                        direction, departure_date, departure_time, queue_position, 
                        is_active, payment_status
                 FROM drivers
                 ORDER BY direction, departure_date, queue_position''')
    drivers = c.fetchall()
    conn.close()
    
    if not drivers:
        await callback.message.edit_text(
            "‚ùå –¢—ñ—Ä–∫–µ–ª–≥–µ–Ω –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä –∂–æ“õ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
            ])
        )
        return
    
    msg = "üë• <b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä —Ç—ñ–∑—ñ–º—ñ:</b>\n\n"
    
    current_direction = None
    for driver in drivers:
        if driver[4] != current_direction:
            current_direction = driver[4]
            msg += f"\nüìç <b>{current_direction}</b>\n\n"
        
        status = "‚úÖ –ë–µ–ª—Å–µ–Ω–¥—ñ" if driver[8] else "‚ùå –ë–µ–ª—Å–µ–Ω–¥—ñ –µ–º–µ—Å"
        payment = "üéâ –ë–µ—Ç–∞" if driver[9] else "‚ùå –¢”©–ª–µ–Ω–±–µ–≥–µ–Ω"
        date_display = format_date_display(driver[5])
        
        msg += f"<b>‚Ññ{driver[7]}</b> - {driver[1]}\n"
        msg += f"   üöó {driver[2]} ({driver[3]})\n"
        msg += f"   üìÖ {date_display} | üïê {driver[6]}\n"
        msg += f"   üìä {status} | üí∞ {payment}\n"
        msg += f"   üÜî ID: <code>{driver[0]}</code>\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ
async def admin_clients_list(callback: types.CallbackQuery):
    """–ë–∞—Ä–ª—ã“õ –∫–ª–∏–µ–Ω—Ç—Ç–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç–µ–¥—ñ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute('''SELECT c.user_id, c.full_name, COUNT(b.id) as total_bookings
                 FROM clients c
                 LEFT JOIN bookings b ON c.id = b.client_id
                 GROUP BY c.id
                 ORDER BY total_bookings DESC''')
    clients = c.fetchall()
    conn.close()
    
    if not clients:
        await callback.message.edit_text(
            "‚ùå –¢—ñ—Ä–∫–µ–ª–≥–µ–Ω –∫–ª–∏–µ–Ω—Ç—Ç–µ—Ä –∂–æ“õ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
            ])
        )
        return
    
    msg = "üßç‚Äç‚ôÇÔ∏è <b>–ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ:</b>\n\n"
    
    for i, client in enumerate(clients, 1):
        msg += f"{i}. {client[1]}\n"
        msg += f"   üìä –ë—Ä–æ–Ω–¥–∞—Ä: {client[2]}\n"
        msg += f"   üÜî ID: <code>{client[0]}</code>\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def admin_statistics(callback: types.CallbackQuery):
    """–ñ“Ø–π–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    
    # –ñ–∞–ª–ø—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute("SELECT COUNT(*) FROM drivers")
    total_drivers = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM drivers WHERE is_active=1")
    active_drivers = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM clients")
    total_clients = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM bookings WHERE status='active'")
    active_bookings = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM drivers WHERE payment_status=1")
    paid_drivers = c.fetchone()[0]
    
    # –ë–∞“ì—ã—Ç—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞
    c.execute('''SELECT direction, COUNT(*) 
                 FROM drivers 
                 WHERE is_active=1 
                 GROUP BY direction''')
    directions = c.fetchall()
    
    # –ë“Ø–≥—ñ–Ω–≥—ñ –±—Ä–æ–Ω–¥–∞—Ä
    c.execute('''SELECT COUNT(*) 
                 FROM bookings 
                 WHERE DATE(booking_time) = DATE('now')''')
    today_bookings = c.fetchone()[0]
    
    conn.close()
    
    msg = "üìä <b>–ñ“Ø–π–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã</b>\n\n"
    msg += f"üë• <b>–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä:</b>\n"
    msg += f"   ‚Ä¢ –ñ–∞–ª–ø—ã: {total_drivers}\n"
    msg += f"   ‚Ä¢ –ë–µ–ª—Å–µ–Ω–¥—ñ: {active_drivers}\n"
    msg += f"   ‚Ä¢ –¢”©–ª–µ–º –∂–∞—Å–∞“ì–∞–Ω: {paid_drivers}\n\n"
    
    msg += f"üßç‚Äç‚ôÇÔ∏è <b>–ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä:</b> {total_clients}\n\n"
    
    msg += f"üìã <b>–ë—Ä–æ–Ω–¥–∞—Ä:</b>\n"
    msg += f"   ‚Ä¢ –ê–∫—Ç–∏–≤—Ç—ñ: {active_bookings}\n"
    msg += f"   ‚Ä¢ –ë“Ø–≥—ñ–Ω: {today_bookings}\n\n"
    
    if directions:
        msg += "üìç <b>–ë–∞“ì—ã—Ç—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞:</b>\n"
        for direction in directions:
            msg += f"   ‚Ä¢ {direction[0]}: {direction[1]} –∫”©–ª—ñ–∫\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ñ–∞“£–∞—Ä—Ç—É", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –¢”©–ª–µ–º–¥–µ—Ä
async def admin_payments(callback: types.CallbackQuery):
    """–¢”©–ª–µ–Ω–±–µ–≥–µ–Ω –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç–µ–¥—ñ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute('''SELECT user_id, full_name, car_number, departure_date, departure_time
                 FROM drivers
                 WHERE payment_status = 0
                 ORDER BY created_at DESC''')
    pending_payments = c.fetchall()
    conn.close()
    
    if not pending_payments:
        await callback.message.edit_text(
            "‚úÖ –ë–∞—Ä–ª—ã“õ —Ç”©–ª–µ–º–¥–µ—Ä —Ä–∞—Å—Ç–∞–ª“ì–∞–Ω!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
            ])
        )
        return
    
    msg = "üí∞ <b>–¢”©–ª–µ–Ω–±–µ–≥–µ–Ω –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä:</b>\n\n"
    
    keyboard_buttons = []
    for driver in pending_payments:
        date_display = format_date_display(driver[3])
        msg += f"üë§ {driver[1]}\n"
        msg += f"   üöó {driver[2]}\n"
        msg += f"   üìÖ {date_display} | üïê {driver[4]}\n"
        msg += f"   üÜî ID: <code>{driver[0]}</code>\n\n"
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚úÖ –†–∞—Å—Ç–∞—É: {driver[1]}",
                callback_data=f"payment_approve_{driver[0]}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")])
    
    await callback.message.edit_text(
        msg,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )
    await callback.answer()

# –¢”©–ª–µ–º–¥—ñ —Ä–∞—Å—Ç–∞—É
async def approve_payment(callback: types.CallbackQuery, bot):
    """–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–Ω—ñ“£ —Ç”©–ª–µ–º—ñ–Ω —Ä–∞—Å—Ç–∞–π–¥—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    driver_id = int(callback.data.split("_")[2])
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute("UPDATE drivers SET payment_status=1, is_active=1 WHERE user_id=?", (driver_id,))
    conn.commit()
    
    c.execute("SELECT full_name FROM drivers WHERE user_id=?", (driver_id,))
    driver_name = c.fetchone()[0]
    conn.close()
    
    # –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞
    try:
        await bot.send_message(
            driver_id,
            "‚úÖ <b>–¢”©–ª–µ–º—ñ“£—ñ–∑ —Ä–∞—Å—Ç–∞–ª–¥—ã!</b>\n\n"
            "–ö”©–ª—ñ–≥—ñ“£—ñ–∑ –µ–Ω–¥—ñ –±–µ–ª—Å–µ–Ω–¥—ñ.\n"
            "–ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä —Å—ñ–∑–≥–µ –±—Ä–æ–Ω–¥–∞–π –∞–ª–∞–¥—ã.",
            parse_mode="HTML"
        )
    except:
        pass
    
    await callback.answer(f"‚úÖ {driver_name} —Ç”©–ª–µ–º—ñ —Ä–∞—Å—Ç–∞–ª–¥—ã!", show_alert=True)
    await admin_payments(callback)

# –ö–µ–∑–µ–∫ –±–∞—Å“õ–∞—Ä—É
async def admin_queue_management(callback: types.CallbackQuery):
    """–ö–µ–∑–µ–∫—Ç—ñ –±–∞—Å“õ–∞—Ä—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute('''SELECT user_id, full_name, car_number, direction, queue_position
                 FROM drivers
                 WHERE is_active=1
                 ORDER BY direction, queue_position''')
    drivers = c.fetchall()
    conn.close()
    
    if not drivers:
        await callback.message.edit_text(
            "‚ùå –ë–µ–ª—Å–µ–Ω–¥—ñ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä –∂–æ“õ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
            ])
        )
        return
    
    msg = "üîß <b>–ö–µ–∑–µ–∫ –±–∞—Å“õ–∞—Ä—É</b>\n\n"
    
    current_direction = None
    keyboard_buttons = []
    
    for driver in drivers:
        if driver[3] != current_direction:
            current_direction = driver[3]
            msg += f"\nüìç <b>{current_direction}</b>\n\n"
        
        msg += f"‚Ññ{driver[4]} - {driver[1]} ({driver[2]})\n"
        
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"‚¨ÜÔ∏è ‚Ññ{driver[4]}", callback_data=f"queue_up_{driver[0]}"),
            InlineKeyboardButton(text=f"‚¨áÔ∏è ‚Ññ{driver[4]}", callback_data=f"queue_down_{driver[0]}")
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")])
    
    await callback.message.edit_text(
        msg,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )
    await callback.answer()

# –ö–µ–∑–µ–∫—Ç—ñ –∂–æ“ì–∞—Ä—ã –∂—ã–ª–∂—ã—Ç—É
async def queue_move_up(callback: types.CallbackQuery):
    """–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–¥—ñ –∫–µ–∑–µ–∫—Ç–µ –∂–æ“ì–∞—Ä—ã –∫”©—Ç–µ—Ä–µ–¥—ñ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    driver_id = int(callback.data.split("_")[2])
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    
    c.execute("SELECT queue_position, direction FROM drivers WHERE user_id=?", (driver_id,))
    current = c.fetchone()
    
    if current[0] <= 1:
        await callback.answer("‚ùå –ë“±–ª –±—ñ—Ä—ñ–Ω—à—ñ –æ—Ä—ã–Ω–¥–∞!", show_alert=True)
        conn.close()
        return
    
    c.execute('''UPDATE drivers SET queue_position = queue_position + 1 
                 WHERE direction=? AND queue_position=?''', 
              (current[1], current[0] - 1))
    
    c.execute("UPDATE drivers SET queue_position=? WHERE user_id=?", 
              (current[0] - 1, driver_id))
    
    conn.commit()
    conn.close()
    
    await callback.answer("‚úÖ –ö–µ–∑–µ–∫ –∂–æ“ì–∞—Ä—ã –∂—ã–ª–∂—ã–¥—ã!")
    await admin_queue_management(callback)

# –ö–µ–∑–µ–∫—Ç—ñ —Ç”©–º–µ–Ω –∂—ã–ª–∂—ã—Ç—É
async def queue_move_down(callback: types.CallbackQuery):
    """–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–¥—ñ –∫–µ–∑–µ–∫—Ç–µ —Ç”©–º–µ–Ω —Ç“Ø—Å—ñ—Ä–µ–¥—ñ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    driver_id = int(callback.data.split("_")[2])
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    
    c.execute("SELECT queue_position, direction FROM drivers WHERE user_id=?", (driver_id,))
    current = c.fetchone()
    
    c.execute("SELECT MAX(queue_position) FROM drivers WHERE direction=?", (current[1],))
    max_pos = c.fetchone()[0]
    
    if current[0] >= max_pos:
        await callback.answer("‚ùå –ë“±–ª —Å–æ“£“ì—ã –æ—Ä—ã–Ω–¥–∞!", show_alert=True)
        conn.close()
        return
    
    c.execute('''UPDATE drivers SET queue_position = queue_position - 1 
                 WHERE direction=? AND queue_position=?''', 
              (current[1], current[0] + 1))
    
    c.execute("UPDATE drivers SET queue_position=? WHERE user_id=?", 
              (current[0] + 1, driver_id))
    
    conn.commit()
    conn.close()
    
    await callback.answer("‚úÖ –ö–µ–∑–µ–∫ —Ç”©–º–µ–Ω –∂—ã–ª–∂—ã–¥—ã!")
    await admin_queue_management(callback)

# –ê–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ
async def admin_list_view(callback: types.CallbackQuery):
    """–ë–∞—Ä–ª—ã“õ –∞–¥–º–∏–Ω–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç–µ–¥—ñ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    conn = sqlite3.connect('taxi_bot.db')
    c = conn.cursor()
    c.execute("SELECT user_id, added_at FROM admins ORDER BY added_at")
    admins = c.fetchall()
    conn.close()
    
    msg = "üëë <b>–ê–¥–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ:</b>\n\n"
    
    for i, admin in enumerate(admins, 1):
        msg += f"{i}. User ID: <code>{admin[0]}</code>\n"
        if admin[1]:
            try:
                date = datetime.fromisoformat(admin[1]).strftime('%d.%m.%Y')
                msg += f"   üìÖ “ö–æ—Å—ã–ª“ì–∞–Ω: {date}\n"
            except:
                pass
        msg += "\n"
    
    msg += f"<b>–ñ–∞–ª–ø—ã:</b> {len(admins)} –∞–¥–º–∏–Ω\n\n"
    msg += "üí° <b>–ê–¥–º–∏–Ω–¥–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É:</b>\n"
    msg += "‚Ä¢ “ö–æ—Å—É: <code>/addadmin USER_ID</code>\n"
    msg += "‚Ä¢ –ñ–æ—é: <code>/removeadmin USER_ID</code>"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ–Ω–µ “õ–∞–π—Ç—É
async def admin_back(callback: types.CallbackQuery):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ–Ω—ñ“£ –±–∞—Å—Ç—ã –±–µ—Ç—ñ–Ω–µ “õ–∞–π—Ç–∞–¥—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –°—ñ–∑–¥–µ “õ“±“õ—ã“õ –∂–æ“õ", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ</b>\n\n"
        "–ë–∞—Å“õ–∞—Ä—É –æ–ø—Ü–∏—è–ª–∞—Ä—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# ==================== –ö–û–ù–°–û–õ–¨ –†–ï–ñ–ò–ú–Ü ====================

if __name__ == "__main__":
    """–ö–æ–Ω—Å–æ–ª—å–¥–∞–Ω —Ç—ñ–∫–µ–ª–µ–π —Å–∫—Ä–∏–ø—Ç —Ä–µ—Ç—ñ–Ω–¥–µ —ñ—Å–∫–µ “õ–æ—Å—É"""
    import sys
    
    print("\n" + "="*50)
    print("üîê –ê–î–ú–ò–ù–î–ï–†–î–Ü –ë–ê–°“ö–ê–†–£")
    print("="*50 + "\n")
    
    if len(sys.argv) < 2:
        print("–ü–∞–π–¥–∞–ª–∞–Ω—É:")
        print("  python admin.py add USER_ID      - –ê–¥–º–∏–Ω “õ–æ—Å—É")
        print("  python admin.py remove USER_ID   - –ê–¥–º–∏–Ω–¥—ñ –∂–æ—é")
        print("  python admin.py list             - –ë–∞—Ä–ª—ã“õ –∞–¥–º–∏–Ω–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É")
        print("\n–ú—ã—Å–∞–ª:")
        print("  python admin.py add 123456789")
        sys.exit(0)
    
    command = sys.argv[1].lower()
    
    if command == "add":
        if len(sys.argv) < 3:
            print("‚ùå “ö–∞—Ç–µ: User ID –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω!")
            print("–ú—ã—Å–∞–ª: python admin.py add 123456789")
            sys.exit(1)
        
        try:
            user_id = int(sys.argv[2])
            add_admin(user_id)
        except ValueError:
            print("‚ùå “ö–∞—Ç–µ: User ID —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫!")
            sys.exit(1)
    
    elif command == "remove":
        if len(sys.argv) < 3:
            print("‚ùå “ö–∞—Ç–µ: User ID –∫”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω!")
            print("–ú—ã—Å–∞–ª: python admin.py remove 123456789")
            sys.exit(1)
        
        try:
            user_id = int(sys.argv[2])
            remove_admin(user_id)
        except ValueError:
            print("‚ùå “ö–∞—Ç–µ: User ID —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫!")
            sys.exit(1)
    
    elif command == "list":
        list_admins()
    
    else:
        print(f"‚ùå –ë–µ–ª–≥—ñ—Å—ñ–∑ –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä: add, remove, list")
        sys.exit(1)